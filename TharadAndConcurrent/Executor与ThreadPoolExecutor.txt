1.Executor接口介绍
	接口ExecutorService是Executor的子接口
	唯一的实现类AbstractExecutorService，AbstractExecutorService类中的方法列表
	AbstractExecutorService类的子类ThreadPoolExecutor
2.使用Executor工厂类创建线程池
	接口Executor仅仅是一种规范，是一种声明，是一种定义，并没有实现任何功能。
	炫耀使用接口的实现类来完成指定的功能，比如ThreadPoolExecutor
	ThreadPoolExecutor实例化的时候需要传入很多个参数，还要 线程的并发数等与线程池运行的效率有关，所以官网建议使用Executors工厂类来创建线程池对象。
	2.1.使用newCachedThreadPool()
		创建的是无界线程池
		可以进行线程的自动回收
		无界线程池就是池中存放的个数是理论上的Integer.MAX_VALUE最大值。
		ExecutorService service = Executors.newCachedThreadPool();
		service.execute(Runnable);
	2.2.验证newCachedThreadPool()创建Thread池 	
	2.3.使用newCaChedThreadPool(ThreadFactory)定制线程工厂
		无界线程池中的Thread类还可以有程序员自己定制
	2.4.使用newFixedThreadPool(int)创建有界线程池
	2.5.使用newFixedThreadPool(int,ThreadFactory)定制线程工厂
	2.6.使用newSingleThreadExecutor()创建单一线程
3.ThreadPoolExecutor的使用
	3.1.构造方法的测试
		ThreadPoolExecutor(int corePoolSize, int maximunPoolSize,long keepAliveTime,TimeUnit unit, BlockingQueue<Runnable> workQueue)
		corePoolSize
			池中所保存的线程数，包括空闲线程，也就是核心池的大小
		maximunPoolSize
			池中允许的最带线程数
		keepAliveTime
			线程池的数量大于corePoolSize值时，在没有超过指定的时间内是不从线程池中将空闲线程删除的，如果超过此时间单位，则删除
		unit
			keepAliveTime参数的时间单位
		workQueue
			执行前用于保持任务的队列，此队列仅仅保持execute()提交的Runable
		1.gtCorePoolSize()和getMaximumPoolSize()
		2.在线程池中添加的线程数量<=corePoolSize
			pool.getCorePoolSize()	//车中可载人的标准人数
			pool.getMaximunPoolSize()	//车中可载人的最大人数
			pool.getPoolSize()	//车中长在载的人数
			pool.getQueue().size()	//扩展车中正在载的人数。
			马上创建的线程运行这个任务，并不放入扩展Queue中，其他参数忽略
		3.数量>corePoolSi && <=maximunPoolSize
			maximunPoolSize和keepAlive参数忽略
			并把多于标准数量的那部分放入new LinkedBlockingDeque<Runnable>
			线程池中运行的线程数量也永远不会超过corePoolSize值
			多余的线程被放入队列中。
			数量>标准数量 && <最大数量 && SynchronnousQueue
				最大数量和keepAliveTime参数有效
				并且马上创建线程运行这些任务
				不把多于的数量放入synchronnouQueue
				多于的数量执行完任务以后在指定时间后发生超时时将d进行清除
		4.>maximunPoolSize
			maximunPoolSize和keepAlive参数忽略
			并把多于的线程放入new LinkedBlockingDeque<Runnable>中
			处理最大数量的任务，其他任务则不再处理抛出异常。
		5.参数keepAliveTime为0
			线程执行完毕后立即将空闲的线程从非corePool中删除，而corePool的数量还是7.
	3.2.shutdown()和shutdownNow()
		shutdown():
			使当前未执行完的线程继续执行，而不再添加新的任务Task
			不会阻塞
			调用以后，main就马上结束了，而线程池会继续运行直到所有任务执行完才会停止
			不调用，那么线程池会一直保持下去，以便随时执行被添加的新Task任务
		shutdownNow()
			中断所有的任务Task，并且抛出InterrupteException()
			前提是if(Thread.cureentThread().isInterrupted() == true)
			而未执行的线程也不再执行
			从执行队列中删除
			如果没有if语句
	3.3.isShutdown()
		判断线程池是否关闭
	3.4.isTerminating()和isTerminated()
		如果正在执行的程序处于shutdown或者shutDownNow之后正在处于终止但是尚未终止的过程中，调用方法isTerminating()则返回true
		如果线程池关闭后，也就是所有任务都已完成，则方法isTerminated()返回true
	3.5.awaitTermination(long tiemout,TimeUnit unit)
		查看在指定时间以内，线程池是否已经终止工作了。也就是最多等待多少时间后去判断线程池是否已经终止工作了。
		需要shtudown()来配合
	3.6.工厂ThreadFactory+execute()+UncaughtExceptionHandler
	3.7.set/getRejectedExecutionHandler()
		处理任务被拒绝执行时的行为
		implements RejectedExecutionHandler()
		pool.setRejectedExecutionHandler(new MyRejectedExecutionHanler())
	3.8.allwosCoreThreadTimeOut()/(boolean)
		配置核心线程是否有超时的效果	
	3.9.prestartCoreThread()和prestartAllCoreThreads()
		prestartCoreThread():
			没调用一次就创建一个核心线程，返回值为boolean，含义是是否启动了
		prestartAllCoreThreads():
			启动全部核心线程，返回值是启动核心线程的数量
	3.10.getCompletedTaskcount()
		取得已经执行完成的任务数量
	3.11.常见3中队列结合max值的因果效果。
		ArrayBlockingQueue
			可以指定队列中存储元素的多少
		LinkedBlockingDeque
			最大任务为3
			可以指定队列中存储元素的多少
		SynchronousQueue
	3.12.线程池ThreadPoolExcutor的拒绝策略
		线程池中的资源全部被占用的时候，对新添加的Task任务有不同的处理的策略，在默认的情况下，有4种：
			AortPolicy:当添加到线程池中被拒绝是，抛出异常
			CallerRunsPolicy:
				当添加到线程池中被拒绝是，会调用线程池的Thread线程处理被拒绝的任务
			DiscardOldestPolicy:
				当添加到线程池中被拒绝是，线程池会放弃等待队列中最旧的未处理任务，然后将被拒绝的任务添加到等待队列中
			DiscardPolicy:
				当添加到线程池中被拒绝是，线程池将会丢弃被拒绝的任务
	3.13.aferExecute()和beforeExecute()
		重写这两个方法可以对线程池中执行的线程对象实现监控
		MythreadPoolExecute extends ThreadPoolExecutor
	3.14.remove(Runnable)
		可以删除尚未执行的惹怒
	3.15.线程池ThreadPoolExecutor与Runnable执行乱序特性
		接口在Runnable在ThreadPoolExecutor的队列中是按顺序取出，执行确实乱序的
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
1.CountDownLatch的使用
	判断count计数不为0的时候，则当前线程呈wait状态，也就是在屏障处等待。
	同步功能的辅助类，使用的效果是给定一个计数，当使用这个CountDownLatch类的线程判断计数不为0的时候，则呈wait状态，如果为0则继续进行。
	实现等待与继续运行的效果分别使用await()和coutDown()方法来进行
	用await()来判断计数是否为0，如果不为0则呈等待状态，其他线程可以调用count-Down()方法将计数减1，当计数减到0的时候，呈等待的线程继续运行。
	计数无法被重置，如果需要重置计数，使用CyclicBarrier类
	1.1.初步使用 	
		private CountDownLatch countDownLatch = new CountDownLatch(2);
		public void test(){
			try {
				System.out.println("A");
				countDownLatch.await();
				System.out.println("B");
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
			public void downMethod(){
			System.out.println("X");
			//计数有1件为0
			countDownLatch.countDown();
		}
	1.2.裁判在等全部的运动员到来
		多个线程与同步点键阻塞的特性，线程必须全部达到同步点才可以继续向下运行。
	1.3.各就各位准备比赛
	1.4.完整的比赛流程
	1.5.await(long timeout, TimeUnit unit)
		在指定的最大时间内进行waiting状态，超过这个时间则自动唤醒，程序向下运行。
	1.6.getCount()
		获取当前的计数值
2.CyclicBarrier的使用
	不仅有CountDownLatch的所有功能，还可以实现屏障等待的功能，阶段性同步
	在使用的意义在于可以循环地实现线程要一起做任务的目标，而不是像类CountDownLatch一样。
	CyclicBarrier和Semaphore以及CountDown-Latch一样，也是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点
	CyclicBarrier和CountDownLatch细节不同
		CountDownLatch:一个线程或者多个线程，等待另外一个线程或多个线程完成某个事情之后才继续进行
		CyclicBarrier:多个线程之间互相等待，任何一个线程完成之前，所有的线程都必须等待
						重点是“多个线程之间” 任何一个线程没有完成任务，则所有线程都必须等待
						计数是加法操作
	2.1.初步使用
		线程个数大于parties数量时可以进行分批进行的
	2.2.验证屏蔽重置性以及getNumberWaiting()方法的使用
	2.3.用CyclicBarrier实现极端跑步比赛
	2.4.isBroken()的使用
		查询屏障是否处于损害状态
		如果有一个线程由于中断或者超时离开了屏障点，其他所有在屏障点等待的线程也会会抛出BrokenBarrierException或者InterruptedException异常，并且离开屏障点。
	2.5.await(long timeout,TimeUnit unit)
		在指定时间内达到parties的数量，则程序继续向下运行，否则如果出现超时，则抛出TimeoutExceptioin异常
	2.6.
		getNumberWaiting():有几个线程已经到达屏障点
		getParties():取得parties个数
	2.7.reset()
		重置屏障
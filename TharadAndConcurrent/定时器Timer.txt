5.1.定时器Timer的使用
	Timer类主要负责计划任务的功能
	主要的作用就是设置计划任务，但封装任务的类却是TimeTask类
	只in个计划的任务的代码要放入TimeTask的子类中，因为TimerTask是一个抽象类
	5.1.1.schedule(TimeTask task ,Date time)
		该方法的作用在指定的日期执行一次某一任务。
		1.执行任务的时间晚于当前时间--在未来执行
			创建一个Timer就是启动1个新线程，那么这个新启动的线程并不是守护线程，一直在运行，
			改成守护线程
			Timer time = new Timer(true);
		2.计划时间早于当前啊时间---提前运行的效果
			calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND) - 10);
			Date runDate = calendar.getTime();
			System.out.println("计划的时间为： "+ runDate);
			Mytask mytask = new Mytask();
			Timer timer = new Timer();
		3.Timer中允许有多个TimerTask，任务及延时测试
			TimerTask是以队列的方式一个一个被顺序执行，所以执行的时间有可能和预期的时间不一致
			因为前面的任务有可能消耗的时间比较长，则后面的任务也被拖延。
	5.1.2.schedule(TimeTask task, Date time,long period)
		在指定的日期之后按指定的间隔周期，无线循环的执行某一任务。
		1.计划时间晚于当前时间---在未来执行的效果。
		2.计划的时间早于当前的时间---提前运行的效果
			如果计划的时间早于当前时间，则立即执行task任务。
		3.任务执行时间被延时。
		4.TimerTask类的cancel()
			将自身从任务队列中进行清楚。
		5.Timer类的cancel()方法
			和TimerTask类中的cancel()方法清楚自身不同，
			Timer类中cancel()作用是将任务队列中全部任务清空。
		6.Timer的cancel()方法注意事项
			Timer类中cancl()有时并不一定会停止计划任务。
				原因就是Timer类的cancel()有时并没有争抢到queue锁，则让TimrTask类中的任务正常执行
	5.1.3.方法schedule(TimerTask task, long delay)
		以当前时间作为参考。在此时间的基础上延迟指定的号描述后执行一次TimerTask任务。
	5.1.4.schedule(TimeTask task, long delay ,long period)
		以当前时间为参考时间，在此事件基础上延迟指定的毫秒数，在以某一间隔时间无限次树地执行某一任务。
	5.1.5.scheduleAtFixedRate(TimeTask task, Date firestTime,long period)
		都会按顺序执行
		主要区别在于有没有追赶型。
		1.测试schedule() 方法任务不延时----Data类型
		2.测试schedule() 方法任务不延时---long类型
		3.测试schedule()方法任务延时----Date类型
		4.测试schedule()方法任务延时----long类型
		5.测试scheduleAtFixedRate() 方法任务不延时----Data类型
		6.测试scheduleAtFixedRate() 方法任务不延时---long类型
		7.测试scheduleAtFixedRate()方法任务延时----Date类型
		8.测试scheduleAtFixedRate()方法任务延时----long类型
		9.两种方法具有追赶型
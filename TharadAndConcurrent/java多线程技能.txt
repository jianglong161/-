多线程
	1.2.使用多线程
		1.2.1继承Thread类
			在使用多线程的时候，代码的运行结果与代码的执行顺序或调用顺序无关。
			Thrad.java类的start()通知"线程规划器"。此线程已经准备就绪，等待调用线程对象的run()方法
			如果代码调用thread.run()就不是异步执行了，而是同步，那么此线程对象并不交给线程规划期来进行处理
		1.2.2.实现Runnable接口
		1.2.3.实例变量与线程安全
			自动亿线程类中的实例变量针对其他线程可以有共享与不共享之分
			1.不共享之分
			2，共享
				Mythread mythread=new Mythread();
				Thread t1=new Thread(mythread,"A");
				Thread t2=new Thread(mythread,"B");
				Thread t3=new Thread(mythread,"C");
				Thread t4=new Thread(mythread,"D");
				Thread t5=new Thread(mythread,"E");
				同时出现处理相同的数据，线程不安全
				加上关键榟synchronized
				当一个线程调用run()是，先判断run()有没有上锁，如果上锁说明有其他线程正在调用run方法，必须等其他线程对run方法调用后，在调用run()
				synchronized可以在任意对象以及方法上加锁，而加锁的这段代码称为互斥区或临界区
				当一个线程想要执行同步方法里面的代码，线程首先尝试去拿这把锁，如果拿到这把锁，可以执行同步代码，如果拿不到，一直争，多个线程同时挣。
		1.2.4.留意i--与System.out.println()异常
	1.3.currentThread()
		currentThread()可以返回代码端正在被哪个线程调用的信息
	1.4.isAlive()
		判断当前线程是否处于活动状态
			活动状态就是线程已经启动且尚为停止，线程正在运行或准备运行
	1.5.slepp()
		在指定的毫秒数内让当前“正在执行的线程”休眠 ，整个正在执行的线程是指的 this.currentThrea()返回的线程
	1.6.getId()
		取得线程唯一标识
	1.7.停止线程
		停止一个线程意味在线程处理完任务之前停掉正在做的操作。
		大多数停止一个线程的操作方法是用Thread.interrupt()发没法
		有3种方法可以停止线程
			使用退出标志，使线程正常退出，也就是当run方法完成后线程停止
			使用stop()强行执行终止，但是不建议，方法已经过时
			使用interrupt()
		1.7.1.停止不了线程
		1.7.2.判断线程是否停止状态
			this.interrupted():测试当前线程是否已经中断
				连续两次调用，第二次返回false,当线程已经停止，线程中断状态由该方法清除。
			this.isInterrupted():测试线程是否已经中断
				并没有消除状态
		1.7.3.能停止的线程——异常法
			throw new Interuupteion()
		1.7.4.在沉睡中停止
			先sleep后interr
				在sleep状态下停止某以线程，会进入catch语句，并且清除停止状态值，使只变成false.
		1.7.5.能停止的线程——暴力停止
			stop()
		1.7.6.方法stop()与java.lang.ThreadDeath异常
			调用stop()方法时会抛出java.lang.ThreadDeath异常，不用捕捉。
		1.7.7.释放所的不良后果
		1.7.8.使用return停止线程
	1.8.暂停线程
		suspend():暂停线程
		resume():恢复线程执行
		1.8.1.suspend 与 resunme 方法的使用
		1.8.2.suspend 与 resume 缺点--独占
			如果使用不当，极容易造成公共的同步对象的独占。
		1.8.3.suspend与resume方法的缺点，不同步
	1.9.yield()
		放弃当前cpu资源，将它让给其他的任务去占用cpu执行的时间
		放弃的时间不确定。有可能刚刚放弃，马上又获得
	1.10.线程的优先级
		setPriotiy()
		1.10.1.线程优先级具有继承性
			A线程启动B线程，AB线程的优先级是一样的、、
		1.10.2.优先级具有规则性
		1.10.3.优先级具有随机性
	1.11.守护线程
		在java线程中有两种线程，一种是用户线程，另一种就是守护线程
		当进程中不存在非守护线程了，则守护线程自动销毁。
		典型的守护线程就是垃圾回收线程
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
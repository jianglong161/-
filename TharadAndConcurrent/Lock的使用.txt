Lock的使用
4.1.使用ReentrantLock类
	4.1.1.使用ReentrantLock实现同步
			private Lock lock = new ReentrantLock();
			lock.lock()//上锁
			lock.unlock()//解锁
	4.1.3.使用Condition实现等待/通知:错误用法与解决
		关键字synchronized与wait()和notify()/notifyAll()方法相结合可以实现等待/通知模式
		  类ReentrantLock也可以实现同样的功能，需要借助于Condition对象，可以实现多路通知功能，
		  也就是一个lock可以建立多个Condition(对象监视器)实例
		  线程对象可以注册在指定Condition中，从而可以有选择性的进行线程通知
		在使用notify()/notifyAll()方法进行通知时，被通知的线程却是由JVM随机选择的，但是使用ReentrantLock结合Condition类是可以实现选择性通知
		synchronized就相当于整个Lock对象中只有一个单一的Condition对象，所有线程都注册在它一个对象的身上。
	4.1.4.正确使用Connditon实现等待/通知
		Object类中的wait() == Condition await()
		Object wait(long timeout) == Condition await(longt time, TimeUnit unit)
		Object notify() == Condition sigal()
		Object notifyAll() == Condition sigalAll()
	4.1.5.使用多个Condition实习那通知部分线程：错误用法
	4.1.6.使用多个Condition实习那通知部分线程：正确用法
	4.1.7.实现生产者/消费者模式：一对一交替打印
	4.1.8.实现生产者/消费支模式:多对多交替打印
	4.1.9.公平锁与非公平锁
		锁Lock分为公平锁和非公平锁
		公平锁
			线程是按照线程加锁的顺序来分配的，即先来先得的FIFO先进先出锁
		非公平锁
			是一种获取锁的抢占机制
	4.1.10.
	getHoldCount()
		int getHoldCount()来查询当前线程保持锁定的个数
	getQueueLength()
		int getQueueLength() 返回正等待获取次锁定的线程数
		比如有5个线程，1个线程首先执行await()方法，那么调用getQueueLength()方法后返回的值是4，说明4个线程同时等待lock释放
	getWaitQueueLength()
		返回等待与此相关的给定条件Condition的线程估计数
		比如有5个线程，每个线程都执行了同一个condition对象的await()方法，则调用getWaitQueueLength(Condition condition)方法时返回的int值是
	4.1.11
	hasQueueThrad()
		boolean hasQueueThrad(Thread thread)
			查询指定线程是否能带获取锁定
		boolean has Waiters(Condition condtion)
			查询是否有线程获取与此锁定有关的condition条件
		boolean hasQueueThreads()
			查询是否有线程正在等待获取此锁定
	4.1.12
	boolean isFiar lock
		判断是否公平锁
	boolean isHeldByCurrentThread()
		查询当前线程是否保持此锁定
	boolean isLocked()
		作用是查询是否由任意线程保持
	4.1.13.
	void lockInterruptibly()
		如果当前线程为被中断，则获取锁定，如9果已经被中断，则抛出异常
		lock.lock 换成lock.lockInterruptibly()
	boolean tryLock()
		仅在调用时锁定未被另一个线程保持的情况下，才获取该锁定
	boolean tryLock(long timeout, TimeUnit unit)
		如果锁定在给定等待时间内没有被另一个线程保持，且当前线程未被中断，则获取该锁定
	4.1.14.awaitUninterruptibly()
		造成当前线程在接到信号之前一直处于等待状态
		condition.awaitUninterruuptibly()
	4.1.15.awaitUnit()
		造成当前线程在接到信号、被中断或到达指定最后期限之前一直处于等待状态。 
			与此条件相关的锁以原子方式释放，并且出于线程调度的目的，将禁用当前线程，且在发生以下五种情况之一 以前，当前线程将一直处于休眠状态： 
			其他某个线程调用此 Condition 的 signal() 方法，并且碰巧将当前线程选为被唤醒的线程；或者 
			其他某个线程调用此 Condition 的 signalAll() 方法；或者 
			其他某个线程中断当前线程，且支持中断线程的挂起；或者 
			指定的最后期限到了；或者 
			发生“虚假唤醒”。 
			在所有情况下，在此方法可以返回当前线程之前，都必须重新获取与此条件有关的锁。在线程返回时，可以保证 
4.2.使用ReentrantReadWriteLock类
	类ReentrantLock具有完全互斥排他的效果，即同一时间只有一个线程在执行ReentrantLock.lock()方法后面的任务。
	在某些不需要操作实例变量的方法中，完全可以使用读写锁ReentrantReadWriteLock来提升该方法的代码速度
	读写锁也有两个：
		共享锁：读操作相关的锁
		排它锁：写操作相关的锁
	也就是多个读锁之间不互斥，读锁与写锁互斥，写锁与写锁互斥
	在没有线程Thread进行写入操作时，进行读取操作的多个Thread都可以获取读锁，而进行写入操作的Thread只有在获取写锁后才能进行写操作
	即多个Thread可以允许同时进行读操作
	但是同一时刻只允许一个Thread写操作
	读读共享
	写写互斥

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
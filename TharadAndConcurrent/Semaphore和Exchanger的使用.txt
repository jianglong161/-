Semaphore和Exchanger的使用
	Seamphore类：
		所提供的功能完全是synchronized关键字的升级版，但它提供的功能更加的强大与方便，主要的作用就是控制线程并发的数量。
	Exchanger类:
		使两个线程之间互相方便地进行通信。
	1.1.Seamphore的使用
		限制线程的并发量，如果不限制线程并发的数量，则CPU的资源很快就会被耗尽
		1.1.1.类Seamphore的同步性
			private Semaphore semaphore = new Semaphore(2);
			public void testMethod(){
			try {
				//从此信号量获取一个许可，在提供一个许可前一直将线程阻塞，否则线程被中断
				semaphore.acquire(); 
				System.out.println(Thread.currentThread().getName()
						+ "beigin time= " + System.currentTimeMillis());
				Thread.sleep(5000);
				System.out.println(Thread.currentThread().getName()
					+ "end time= " + System.currentTimeMillis());
				// 释放一个许可，将其返回给信号量。
				semaphore.release();
			}
		1.1.2.类Seamphore构造方法permits参数作用
			参数permits的作用是设置许可的个数
			private Semaphore semaphore = new Semaphore(1);
			使同一时间内最多只有一个线程可以执行acquier()和release()之间的代码，因为只有一个许可，也可以传多个许可
		1.1.3.方法acquire(int permits)
			没调用1次此方法，就使用x个许可。
			new Samaphore(5),中的5并不是最终的许可数量，仅仅是初始的状态值。
		1.1.4.acquireUninterruptibly()
			acquireUninterrruptibly()的作用是等待进入acquire()方法的线程，不允许被中断
		1.1.5.availablePermits()和drainPermits()
			availablePermits():
				返回此Semaphore对象中当前可用的许可数，此方法通常用于调试，以为许可的数量有可能实时在改变，并不是固定的数量。
			drainPermits():
				可获取并返回立即可用的所有许可个数，并且将可用许可置为0。
		1.1.6.getQueueLength()和hasQueueThreads()
			getQueueLength():
				取得等待许可的线程个数
			hasQueueThreads()
				判断有没有线程在等待这个许可。
			这两个方法通常都是在判断当前有没有等待许可的线程信息时使用。
		1.1.7.公平与非公平信号量的测试
			有些时候，获得许可的顺序与线程启动的顺序有关，这时信号量就要分为公平与非公平
			公平信号量就是获得锁的顺序与线程启动的顺序有关，但是不代表百分之一白的获取信号量，仅仅是概率上得到保证。而非公平信号量就是无关的了。
			非公平的信号量运行的效果是线程启动的顺序与调用semaphore.acquire()的顺序无关，也就是线程先启动了并不带白先获得许可
			公平信号量相反。
		1.1.8.tryAcquire()
			无参方法的tryAcquire()的作用是尝试的获得1个许可，如果获取不到则返回false，此方法通常与if连用，具有无阻塞的特点
			无阻塞的特点可以使线程不至于在同步处一直持续等待的状态。
		1.1.9.tryAcquire(int parmits)
			尝试获得x个许可，如果获取不到就返回false
		1.1.10.tryAcquire(long timeout, TimeUnit unit)
			在指定的时间内获取一个许可，如果获取不到就返回false
		1.1.11.tryAcquire(int permits,long timeout,TimeUnit unit)
		1.1.12.多进路-多处理-多出路实验
		1.1.13.多进路-单处理-多出路实验
			加lock.lock()
		1.1.14.使用Semaphore创建字符串池
			类Semaphore可以有效的对并发执行任务的线程数量进行限制，这种功能可以应用在poo池技术中，可以设置同时访问pool池中数据的线程数量	
		1.1.15.使用Semaphore实现多生成者/消费者模式
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
容器的功能扩展
ApplicationContext,用于扩展BeanFactory中现有的功能
BeanFactory：
	来实例化、配置和管理对象，但是它只是一个接口，里面有一个getBean()方法。
	我们一般都不直接用BeanFactory，而是用它的实现类ApplicationContext，
	这个类会自动解析我们配置的applicationContext.xml，
	然后根据我们配置的bean来new对象，将new好的对象放进一个Map中，键就是我们bean的id,值就是new的对象。
使用beanFactory加载xml
	BeanFactory bf= new XmlBeanFactory(new ClassPathResource("applicationContext.xml"));
使用ApplicationContext的方式加载xml
	ApplicationContext context = 
				new ClassPathXmlApplicationContext("applicationContext.xml");
		public ClassPathXmlApplicationContext(String[] configLocations, boolean refresh, ApplicationContext parent)
			throws BeansException {

		super(parent);
		setConfigLocations(configLocations);
		if (refresh) {
			refresh();
		}
	}
	设置路径是不可减少的步骤，ClassPathXmlApplicationContext中可以将配置文件路径以数组的方式传入
	ClassPathXmlApplicationContext可以对数组进行解析并加载，对于解析功能实现都在refresh()中实现
1.设置配置路径
	ClassPathXmlApplicationContext中支持多个配置文件以数组方式同时传入：
		public void setConfigLocations(String... locations) {
		if (locations != null) {
			Assert.noNullElements(locations, "Config locations must not be null");
			this.configLocations = new String[locations.length];
			for (int i = 0; i < locations.length; i++) {
				this.configLocations[i] = resolvePath(locations[i]).trim();
			}
		}
		else {
			this.configLocations = null;
		}
	}
	用于解析给定的路劲数组，当然，如果数组中包含特殊符号，如$(var),那么在resolvPath中会搜索匹配的系统变量并且替换
2.扩展功能
	设置了路径以后，便可以根据路径配置文件做解析以各种功能的实现
	refresh()几乎包含了ApplicationContext中提供的全部功能
	AbstractApplicationContext类
	public void refresh() throws BeansException, IllegalStateException
	ClassPathXmlApplicationContext的初始化步骤，并从解释一下提供的功能：
		1).初始化前的准备工作，例如对系统属性或者环境变量进行准备或者验证
			prepareRefresh();
			在某种情况下，项目需要读取某些系统的环境变量，
			这个变量的设置很可能影响系统的正确性
			ClassPathXmlApplicationContext提供的准备函数
			在spring启动的时候提前对必须的变量进行存在性验证
		2).初始化BeanFactory，并进行xml文件的读取
			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();
			复用BeanFactory中的配置文件读取解析以及其他功能
			这步以后
			ClassPathXmlApplicationContext具有了BeanFacory的所有功能可以对bean进行操作
		3).对BeanFactory进行功能的填充
			prepareBeanFactory(beanFactory);
			@Qualifier与@Autowired
			这两个注解正是在这一步增加的支持。
		4).子类覆盖方法做额外处理
			postProcessBeanFactory(beanFactory);
		5).激活各种BeanFactory处理器
			invokeBeanFactoryPostProcessors(beanFactory);
		6).注册拦截bean，创建bean的处理器，这里只是注册，真正的调用在getBean中
			registerBeanPostProcessors(beanFactory);
		7).为上下文出事户Message源，即不同语言的消息提，国际化处理
			initMessageSource();
		8).初始化应用消息广播器，并放入"applicationEventMulticaster"bean中
			initApplicationEventMulticaster();
		9).留给子类来初始化其他bean		
			onRefresh();
		10).在所有住的的bean中，查找listen bean，注册到消息广播源
			registerListeners();
		11).初始化剩下的单实例
			finishBeanFactoryInitialization(beanFactory);
		12).完成刷新的过程，通知生命周期处理器lifecycleProcessor刷新过程，
			同时发出ContextRefreshEvent通知别人。
			finishRefresh();
3.环境准备
	AbstractApplicationContext类中
	protected void prepareRefresh()
		留给子类覆盖
		initPropertySources();
			用户根据自身的需要重写initPropertySources()方法，
			并在方法中进行个性化属性处理
		getEnvironment().validateRequiredProperties();
			对属性进行验证
4.加载BeanFactory
	 obtainFreshBeanFactory():
		正式实现BeanFactory的地方
		经过这个函数
		ApplicaitionContext就已经拥有BeanFactory的全部功能
		protected ConfigurableListableBeanFactory obtainFreshBeanFactory() {
			refreshBeanFactory();
			ConfigurableListableBeanFactory beanFactory = getBeanFactory();
			if (logger.isDebugEnabled()) {
				logger.debug("Bean factory for " + getDisplayName() + ": " + beanFactory);
			}
			return beanFactory;
		}
		核心实现：AbstractRefreshableApplicationContext类refreshBeanFactory();
		protected final void refreshBeanFactory() ：
			1).创建DefaultListableBeanFactory
				是容器的基础必须首先要实例化
			2).指定序列化ID
			3).定制BeanFactory
			4).加载BeanDefinition
			5).使用全局变量记录BeanFactory实例
	4.1.定制FactoryBean
		protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory)
	4.2.加载BeanDefinition
		除了第一步的初始化
		还需要XmlBeanDefinitionReader来读取XML,那么在这个步骤首先要做的初始化XmlBeanDefinitionReader
		protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory)
		初始化了DefaultListableBeanFactory和XmlBeanDefinitionReader后就可以进行配置文件的读取了。
		AbstractXmlApplicationContext类的
			protected void loadBeanDefinitions(XmlBeanDefinitionReader reader)｛｝
5.功能扩展
	在进入函数prepareBeanFactory()前，Spring已经完成对配置文件的解析，而ApplicationContext在功能上的扩展也由此展开
	AbstractApplicationContext类中
	protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) 
	主要进行了几个发方面的扩展：
		增加对SPEL语言的支持
		增加了对属性编辑器的支持
		增加对一些内置类的信息注入
		设置了依赖功能可忽略的接口
		注册一些可固定依赖的属性
		增加AspectJ的相关支持
		将相关环境变量及属性注册以单例模式注册
	5.1.增加对SPEL语言的支持
		配置bean定义，spel是单独模块，只依赖core模块
		spel使用#{...}作为定界符，所有大括号里面的字符都被认为是SPEL,使用格式如下：
			<bean id = "saxphone" class = "com.xxx"/>
			<bean>
				<property name ="instrument" value ="#{saxphone}"/>
			</bean>
		在源码中通过代码
		beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));
	5.2.增加属性注册编辑器
		SpringDI注入的时候，可以把普通属性注入进来，但是像Date类型无法被识别，提供两种办法：
			1.使用自定义属性编辑器
				使用自定义属性编辑器，通过继承PropertyEditorSupport，重写setAsText方法
			2.注册Spring自带属性编辑器CustomDateEditor：
				1).定义属性编辑器
				2).注册到Spring中
	5.3.添加了ApplicationContextAwareProcessor处理器
		ApplicationContextAwareProcessor实现了BeanPostProcessor接口，
		在实例化bean的时候，Spring激活bean的init-method的前后
		会调用beanPostProcessor的postProcessBeforeInitialization和postProcessAfterInitialization这两个方法
		在ApplicationContextAwareProcessor中
			postProcessAfterInitialization()
				并没有处理太多逻辑
			postProcessBeforeInitialization()
				调用了invokeAwareInterface()
				实现这些Aware接口的bean在被初始化之后，可以取得一些资源
	5.4.设置忽略依赖
		当spring将ApplicationContextAwareProcessor注册以后
		在invokeAwareInterface()中间调用的Aware类已经不是普通的bean
			ResourceLoaderAware
			ApplicationEventPublisherAwre等
		那么当然需要在Spring做bean的依赖注入时忽略它们，而ignoreDependencyInterface
	5.5.注册依赖
		当注册了依赖解析后，例如当注册对BeanFactory.class的解析依赖后，当bean属性注入的时候
		一旦检测到属性为BeanFactory类型，便将beanFactory的实例注入进去。
6.BeanFactory后处理
	BeanFactory作为Spring中容器的功能的基础，
	用于存放所有已经加载bean，
	为了保证程序的高可扩展性。
	Spring准对BeanFactory做了大量的扩展，比如我们熟知的PostProcessor等都是这里实现的
	6.1.激活注册的BeanFactoryPostProcessor
		BeanFactoryPostProcessor接口与BeanPostProcessor相似，可以对bean的定义配置元数据等定义
		springIOC容器允许BeanFactoryPostProcessor在容器实际实例化任何其他的bean之前读取配置元数据，并有可能修改它。
		通过“order”属性来控制BeanFactoryPostProcessor的执行次序
		如果想修改bean
			最好使用BeanPostProcessor
		1.BeanFactoryPostProcessor典型应用：PropertyPlaceholderConfigurer
			<bean id ="message" class="distConfig.HelloMessage">
				<property name = "mes">
					<value>
						${bean.message}
					</valule>
				</property>
			</bean>
			${bean.message}，这时spring的分散配置，可以在另外的配置文件bean.message指定值，如在bean.property
				bean.message= Hi can
			当访问message的bean的时候，mes属性就会被设置成字符串 Hi can
			靠PropertyPlaceholderConfigurer.xml
			PropertyPlaceholderConfigurer间接继承了BeanFactoryPostProcessor
			当spring加载任何实现了这个接口的bean的配置时
				都会在bean工厂载人所有bean的配置之后执行postProcessorBeanFactory()
			在PropertyResourceConfigurer类中实现了postProcessBeanFactory()
				先后调用了mergeProperties,converProperties,processProperties这3个方法，分别得到配置
				将得到的配置转换为合适的类型，最后将配置内容告知BeanFactory
			正是通过实行BeanFactoryPostProcessor接口，BeanFactory会在实例化任何bean之前获得配置信息
		2.使用自定义BeanFactoryPostProcessor
		3.激活BeanFactoryPostProcessor
			PostProcessorRegistrationDelegate类
			public static void invokeBeanFactoryPostProcessors(
			ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors)
	6.2.注册BeanPostProcessor
		真正的调用其实在bean的实例化阶段进行的
		Spring大部分功能都是通过后处理器的方式扩展的，这是Spring框架的一个特性
		但是在BeanFactory中其实并没有实现后处理器的自动注册，在调用的时候如果没有进行手动注册其实是不能使用的
		在ApplicationContext中添加了自动注册的功能，如：
			public class MyInstantiationAwareBeanPostProcessor implements InstantiationAwareBeanPostProcessor{
				public Object postProcessBeforeInitialization(Object bean, String beanName){
					System.out.println("----------");
					return null;
				}
			}
			在配置文件中添加
			使用ApplicationContext方式获取bean的时候，在每个bean时会打印“======”
			这个特性就在registerBeanPostProcessors
		对于BeanFactoryPostProcessor的处理要分两种情况：
			一种是通过硬编码的方式的处理
			另一种是通过配置文件来处理
		BeanPostProcessor的处理中只考虑了配置文件的方式
		对于BeanFactoryPostProcessor的处理，
			不仅要实现注册功能
			还有实现对后处理器的操作
			需要载人配置中的定义，并进行激活
		对于BeanPostProcessor
			并不需要马上调用
			硬编码的方式实现的功能是将后处理器提取并调用，并不需要使用，
			所以不用考虑硬编码
		只需从BeanPostProcessor提取出来并注册进入beanFactory就可以了。
			
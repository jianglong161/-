bean的加载
	AbstractBeanFactory类
		MyTestBean bean = (MyTestBean)bf.getBean("myTestBean");
		public Object getBean(String name) throws BeansException {
			return doGetBean(name, null, null, false);
		}
	加载bean的过程：
		1).转换对应的beanName
			beanName，需要一系列解析
			去除FactoryBean的修饰符，也就是如果name="&aa"，那么会首先去除&
			取指定的alias所表示的最终beanName
		2).尝试从缓存中加载单例
			单例在spring中只会加载一次，后续在使用，直接从缓冲中取
			首先尝试从缓存中加载
			  在创建单例bena的时候会存在依赖注入的情况，而在创建依赖的时候为了避免循环依赖
			  spring创建bean的原则不等bean的创建完成就会将创建bean的ObjectFactory提前曝光
			  也就是将Object加入缓存中，一旦下个bean创建的时候需要的时候依赖上一个bean则直接使用
		3).bean的实例化
			从缓存中得到了bean的原始状态，则需要对bean进行实例化
			缓存记录中只是bean的最原始状态
		4).原始模式的依赖检查
			只有在单实例的模式下，才会尝试解决循环依赖
		5).检测parentBeanFactory
			如果缓存中没有数据的话，直接转到父类工厂上了
		6).将存储xml配置文件的GernericBeanDefinition转换成RootBeanDefinition
			从xml配置文件读取到bean的信息是存储在GernericBeanDefinition
			但是bean的后续处理都是RootBeanDefinition，所以这里需要进行一个转换
			转换父类不为空的话，则一并合并父类对象
		7).寻找依赖
			初始化某个一个bean首先会初始化这个bean所对应的依赖
		8).针对不同的scope进行bean创建
			singleton,prototype,request之类
		9).类型转换
5.1.FactoryBean的使用
	spring通过反射机制利用bean的class属性指定实现类来实例化bean
	spring自身就提供了70多个FactoryBean的实现
		public interface FactoryBean<T> {
			T getObject() throws Exception;
			Class<?> getObjectType();
			default boolean isSingleton() {
				return true;
			}
		}
	当配置文件<bean>的class属性配置的实现类是FactoryBean，通过getBean()返回的不是FactoryBean本身
	  而是FactoryBean()#getObject()方法返回的对象，相当于FactoryBean#getObject()代理了 getBean()
5.2.从缓存中获取单例bean
	DefaultSingletonBeanRegistry类
	public Object getSingleton(String beanName) {
		//
		return getSingleton(beanName, true);
	首先从signletonObject里面获取实例，如果获取不到从earlySingletonObjects里面获取
	如果还获取不到，在尝试用SingletonObjects里面获取beanName对应的ObjectFactory
	然后在调用这个ObjectFactory的getObject来创建bean，并放到earlySingletonObjects里面去。
	并且从singletonFactories里面remove掉这个Object中
		singletonObjects：用于保存beanName和创建bean实例之间的关系，bean name-->bean instance
		singletonFactories:用于保存beanName和创建bean工厂之间的关系  bean name -->Object Factory
		earlySingletonObjects：保存beanName和创建bean实例之间的关系，目的用来检测循环引用
		registerSingletons：用来保存当前对象的所有注册的bena
5.3.从bean的实例中获取对象
	在getBane()中，getObjectForBeanInstance，无论是从缓存中获取bean还是从不同的scope中获取bean
	无论是从缓存中获取bean还是从不同的scope中获取bean都是原始bean
	其实是工厂bean的初始状态，但是我们真正的需要的是bean中定义的factory-method方法中返回的bean，
	getObjectForBeanInstance所做的工作:
		1).对FactoryBean正确性的验证
		2).对非FactoryBean不做任何处理
		3).对bean进行转换
		4).将Factory解析bean的工作委托给getObjectForBeanInstance
	spring获取bean的实例规则有一条：
		尽可能保证所有bean初始化后都会调用注册的BeanPostProcessor的postProcessAfterInitialition方法进行处理
5.4.获取单例
	Spring中使用getSingleton的重载方法实现bean的加载过程
		DefaultSingletonBeanRegistry类public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory)
	使用了回调方法，使得程序可以在单例创建前后做一些准备以处理操作，而真正获取不再这个方法
		1).检测缓存是否已经加载过
		2).若没有加载，则记录beanName的正在加载状态
		3).加载单例前，记录状态
			protected void beforeSingletonCreation(String beanName) {
				if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {
					throw new BeanCurrentlyInCreationException(beanName);
				}
			}
		4).通过调用参数传入的ObjectFactory的个体Object方法实例化bean
		5).加载单例后的处理方法调用
			当bean加载结束后需要移除缓存中对该bean的正在加载状态
			protected void afterSingletonCreation(String beanName) {
				if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {
					throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation");
				}
			}
		6).将结果记录至缓存并删除加载bean过程中的各种辅助状态
			protected void addSingleton(String beanName, Object singletonObject) {
				synchronized (this.singletonObjects) {
					this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT));
					this.singletonFactories.remove(beanName);
					this.earlySingletonObjects.remove(beanName);
					this.registeredSingletons.add(beanName);
				}
			}
		7).处理返回结果	
			bean加载的逻辑就是其实在传入的ObjectFactory类型的参数singletonFactory中定义的
5.5.准备创建bean
	一个真正干活的函数都是do开头的比如，doGetObjectFromFactoryBean，
	给我们错觉的函数比如getObjectFromFactoryBean:只是去全局做统筹的工作
	createBean做准备工作
	AbstractAutowireCapableBeanFactory类的createBean
	protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException
		1).根据设置的class属性或者根据className来解析Class
		2).对Overrides属性进行标记以及验证
		3).应用初始化前的后处理器，解析指定bean是否存在在初始化前的短路操作
		4).创建bean
	5.5.1.处理Override属性
		AbstractBeanDefinition类
		protected void prepareMethodOverride(MethodOverride mo)
	5.5.2.实例化的前置处理
		在真正调用doCreate()创建bean的实例前使用了这样一个方法resolveBeforeInstantiation(beanName,mbd)对BeanDefinigtion中的属性
		经过前置处理后返回的结果如果不为空，那么会直接略过后续的Bean的创建而直接返回结果
		protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd)
		1.实例化前的后处理器应用
			bean的实例化前调用，也就是将AbstractBeanDefinition转换为BeanWrapper前的处理。
			给子类一个修改BeanDefinition的机会
			在bean实例化前会调用后处理器的方法进行处理
			protected Object applyBeanPostProcessorsBeforeInstantiation(Class<?> beanClass, String beanName) {
				for (BeanPostProcessor bp : getBeanPostProcessors()) {
					if (bp instanceof InstantiationAwareBeanPostProcessor) {
						InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
						Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName);
						if (result != null) {
							return result;
						}
					}
				}
				return null;
			}		
		2.实例化后的后处理器应用
			Spring的规则是在bean的初始化后尽可能保证将注册后的处理器的 postProcessBeforeInstantiation() 应用到该bean中
			如果返回的bean不为空，那么便不会再次经历普通的bean的创建过程
			public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)
			throws BeansException {

				Object result = existingBean;
				for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) {
					result = beanProcessor.postProcessAfterInitialization(result, beanName);
					if (result == null) {
						return result;
					}
				}
				return result;
			}
5.6.循环依赖
	5.6.1.什么是循环依赖
		循环依赖就是循环引用
		循环调用是方法之间的环调用
	5.6.2.Spring如何解决循环依赖
		分成了3部分
		1.构造器循环依赖
			通过构造器注入造成循环依赖是无法解决的，只能抛出BeanCurrentlyInCreationException异常表示循环依赖。
			如创建A类时需要B类，创建B需要c，创建c又需要a，构成循环
			Spring容器将每个正在创建的bean标识符放在一个“当前创建bean池”中，bena标识符在创建的过程中一直保持在这个池中
			  因此如果创建bean的过程中发现自己已经在当前创建的bean池中，将抛出BeanCurrentlyInCreationException异常表示
			  循环异常，而对于创建完毕的bean，会将从此池中剔除
		2.setter循环注入
			对于setter注入造成的依赖是通过Spring容器提前暴露刚完成构造器注入但未完成其他步骤的bean来完成的，
			  而且只能解决单例作用的bean的循环依赖
			通过提前暴露一个单例工厂方法，从而使其他bean能引到该bean
			具体步骤
				1).Spring容器创建单例“TestA”bean，首先根据无参构造器创建bean，并暴露一个“ObjectFactory”用于返回一个提前
				   暴露一个创建的bean，并将“testA”标识符放到“当前创建的bean”池，然后setter注入“testB”
				2).Spring容器创建单例“TestB”bean，首先根据无参构造器创建bean，并暴露一个“ObjectFactory”用于返回一个提前
				   暴露一个创建的bean，并将“testA”标识符放到“当前创建的bean”池，然后setter注入“circle”
				3).Spring容器创建单例“TestC”bean，首先根据无参构造器创建bean，并暴露一个“ObjectFactory”用于返回一个提前
				   暴露一个创建的bean，进行setter注入“testA”,进行注入“testA”时由于提前暴露了一个“ObjectFactory”工厂，
				   从而使用它返回提前暴露的一个创建中的bean
				4).最后在依赖注入testB和testA,完成setter注入
		3.Prototype范围内的依赖注入
			对于prototype作用bean，Spring容器无法完成依赖注入，因为Spring容器不进行缓存prototype作用域的bean，
			因此无法提前暴露一个创建中的bean
			通过setAllowCircularReference(false);来禁止
5.7.创建Bean
	当经历过resolveBeforeInstantiation方法后，程序有两个选择，如果创建了代理或者重写了InstantionAwareBeanPostProcessor
	的postProcessBeforeInstantiation方法并在postProcessBeforeInstantitation改变了bean，则直接返回就行了，否则就正常创建
	bean
	protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args):
		1).如果是单例则首先需要清楚缓存
		2).实例化bean，将BeanDefinition转换成BeanWrapper
			a.如果存在工厂方法则使用工厂方法进行初始化
			b.使用构造函数进行初始化，根据参数
			c.不存在工厂也不存在带参数的构造函数，使用默认的构造函数
		3).MergedBeanDefinitionPostProcessor的应用
			bean合并处理后，Autowired注解正是通过此方法实现诸如类型的预解析
		4).依赖处理
			当创建B的时候，涉及自动注入A的步骤时，并不是直接创建A,而是通过放入缓存中的ObjectFactory来创建实例
		5).属性填充。将所有属性填充到bean中
		6).循环依赖检测
			判断是否出现循环依赖，判断出现异常
		7).注册DisposableBean
			如果配置了destroy-method，这里需要以便于销毁时候调用
		8).完成创建并返回。
	5.7.1.创建bean的实例
		从AbstractAutowireCapableBeanFactory类的
		protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) 开始：
			1).如果在RootBeanDefinition中存在factoryMethodName属性，或者在配置文件中配置了factory-method
			    那么spring会尝试使用instantiateUsingFactoryMethod(beanName,mbd,args)方法根据RootBeanDefiniton中配置生成bean实例
			2).解析构造函数并进行构造函数实例化。判断的过程是个比较消耗性能的步骤，所以采用缓存机制，
			    如果已经解析过，则不需要重复解析而是直接从RootBeanDefinition中的属性resolvedConstructorOrFactoryMethod缓存值取
				否则再次解析，放在RootBeanDefinition中的属性resolvedConstructorOrFactoryMethod中
			1.autowireConstructor
				对于实例创建的spring中分两种情况，一种是通用的实例化，另一种是带有参数的实例化
				带有参数的实例化过程中相当复杂，因为存在着不确定性，所以在判断对应参数上做了大量工作
				ConstructorResolver类的
				public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,
					Constructor<?>[] chosenCtors, final Object[] explicitArgs)：
				(1).构造函数参数的确定
					a.根据explicitArgs参数判断
						如果传入的参数explicitArgs不为空，那边可以直接确定参数，
						因为explicitArgs参数是在调用bean的时候用户指定，在beanFactory类中存在这样方法:
							Object getBean(String name, Object.....args)
							在获取bean的时候，用户不但可以指定bean的名称还可以指定bean所对应类的构造函数或者工厂方法的函数
							主要用于静态工厂方法的调用
					b.从缓冲中获取
					c.配置文件中获取
				(2).构造函数的确定
					根据参数个数来匹配
					在匹配之前需要对构造函数按照public构造函数优先参数数量降序，非public构造函数参数数量降序
					遍历情况下迅速判断排在后面的构造函数参数个数是否符合条件
					获取参数名称有两种模式
						一种通过注解的方式直接获取
						一种通过spring中提供的工具栏ParameterNameDiscovere来获取
				(3).根据确定的构造函数转换成对应的参数类型
					主要是使用spring中提供的类型转换器或者用户自己定义。
				(4).构造函数不确定性验证
				(5).根据实例化策略以及得到的构造函数以及构造函数参数化实例化Bean
			2.instantiateBean
				不带参数的构造器实例的过程
					直接调用实例化策略就行了。
			3.实例化策略
				SimpleInstantiationStrategy类的
				public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) 
					首先判断如果beanDefinition.getMethodOvrirides()为空，
					也就是用户没有使用replace或者lookup的方法，那么直接使用反射
	5.7.2.记录创建bean的ObjectFactory
		boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&
				isSingletonCurrentlyInCreation(beanName));
		if (earlySingletonExposure) {
			if (logger.isDebugEnabled()) {
				logger.debug("Eagerly caching bean '" + beanName +
						"' to allow for resolving potential circular references");
			}
			//避免后期循环依赖，可以在bean的初始化完成前创建实例的ObjectFactory工厂
			addSingletonFactory(beanName, new ObjectFactory<Object>() {
				@Override
				public Object getObject() throws BeansException {
					//对bean的再一次依赖引用，主要是应用SmartInstanttitatioAwareBeanPostProcesss
					
					//熟悉的AOP就是在这里将advice动态织入bean中，没有直接返回bean不做任何处理i
					return getEarlyBeanReference(beanName, mbd, bean);
				}
			});
		}
		earlySingletonExposure：
			提早曝光的单例，有哪些条件值影响它
		mbd.isSingleton：
			此RootBeanDefinition
		this.allowCircularReferences：
			是否允许循环依赖
		this.allowCircularReferences：
			该bean是否在创建中
		当A类中含有B类属性，而类B中又含有属性类A,初始化A:
			开始创建bean（记录beanName）
			addSingletonFactory
			populateBean填充属性---->开始创建bean（记录beanName）
			结束创建				 addSingletonFactory
									 populateBean填充属性-------->getBean(A)
		spring处理循环依赖的方法:
			在B中创建依赖A时通过ObjectFactory提供的实例化方法来中断A的属性填充
			使B中持有的A仅仅是被初始化并没有填充任何属性的A
			而这正初始化A的步骤还是在最开始创建A的时候进行。
			但是因为A与B中的A所表示的属性地址是一样的
			所以在A中创建好的属性填充自然可以通过B中的A来获取。
	5.7.3.属性注入
		AbstractAutowireCapableBeanFactory类中
		protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw)：
			1).InstantiationAwareBeanPostProcessors处理器的postProcessAfterInstantiation函数的应用
				此函数可以控制是否继续填充
			2).根据注入类型，提取依赖的bean，并统一存入Property Values中
			3).应用InstantiationAwareBeanPostProcessors处理器的postProcessAfterInstantiation(),
				对属性获取完毕填充前对属性再次应用，典型应用RequireAnnotationBeanPostProcessor类中对属性的验证
			4).将所有Property Values中的属性填充到
		1.autowireByName
			AbstractAutowireCapableBeanFactory类
			protected void autowireByName(
				String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)：
				传入的参数pw中找出已经加载的bean，并递归实例化，进而加载到pw中
		2.autowireByType
			AbstractAutowireCapableBeanFactory类
			protected void autowireByType(
				String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) {
				根据名称自动匹配的第一步就是寻找bw中需要依赖注入的属性
				同样根据类型自动匹配的实现来讲第一步也是寻找bw中需要依赖注入的属性
				然后遍历这些属性并自动寻找类型匹配的bean
				spring提供了对集合类型的注入支持
				@Autowire
					private List<Test> tests;
					spring将会把所有的与Test匹配的类型找出来并注入tests属性
				对于寻找类型匹配的逻辑实现resolveDependency函数中
				DefaultListableBeanFactory类
				public Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName,
					Set<String> autowiredBeanNames, TypeConverter typeConverter)
					寻找类型匹配执行顺序时，首先尝试使用解析器进行解析
					解析不成功根据各种类型进行解析
		3.applyPropertyValues
			获取的是PropertyValues形式存在的，还没有应用到实例化的bean中，这一工作是在applyPropertyValues中
			protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) 
	5.7.4.初始化bean
		进入init-method
		AbstractAutowireCapableBeanFactory类
		protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) 
			1.激活Aware()
				实现Aware接口的bean在初始化后，可以取得一些相对应的资源
				例如实现BeanFactoryAware的bean在初始后，
				spring容器将会注入BeanFactory的实例
				而实现ApplicationContextAware的bean，在bean被调用后，将会被注入ApplicationContext的实例等。
			2.处理器的应用
			3.激活自定义的init()方法
				除了init-method，还有自定义的bena实现InitialzingBean接口，并在afterProperties中实现自己的初始化业务逻辑。
	5.7.5.注册DisposableBean
		提供销毁方法的拓展入口
		除了destroy-method
		还有还可以注册后处理器DestructionAwareBeanPostProcessor来统一处理bean的销毁方法。
		
		
					
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
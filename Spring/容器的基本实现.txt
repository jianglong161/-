容器的基本实现
spring是个大水桶，bean就是容器里的水
1.1.容器的基本用法
1.2.功能基本分析
1.3.工程搭建
1.4.Spring的结构组成
	1.4.1.beans包的层级结构
		src/main/java：用于展现Spring的主要逻辑
		src/main/resources：用于存放系统的配置文件
		src/test/java：用于对主要逻辑进行单元测试
		src/test/resources：用于存放测试用的配置文件
	1.4.2.核心类介绍
		spring最核心的两个类
		1.DefaultListableBeanFactory
			xmlBeanFactory是继承了额DefaulyListableBeanFactory，是整个bean加载的核心部分
			 是spring注册以及加载bean的默认实现
			xmlBeanFactory使用的自定义的xml读取器XmlBeanDefinitionReader
			DefaulyListableBeanFactory extends AbsractAutoWirCapableBeanFactory implemtnts COnfigurableListableBeanFactory,BeanDefinitionRegistry
			AliasRegistry：定义对alias的简单增删改等操作。
			SimpleAliasRegistry：主要使用map作为alias缓存，并对接口AliasRegistry进行实现。
			SingletonBeanRegistry：定义单例的注册以及获取
			BeanFanctory：定义bean以及各种bean的各种获取
			DefaultSingletonBeanRegistry：对接口SingletonBeanRegistry各函数的实现
			HierarchicalBeanFactrory:继承Beanfactory，增加了对parentFactory的支持
			BeanDefinitonRegisty:定义对BeanDefiniton的各种改查操作
			FactoryBeanRegistrySupport：在DefaultSingletonBeanRegistry基础上增加了FactoryBean的特殊处理功能。
			ConfigurableBeanFactory:提供配置各种factory的各种方法
			ListableBeanFactory:根据各种条件获取bean的配置清单
			AbstractBeanFactory：综合FactoryBeanRegistrySupport和ConfigurableBeanFactory的功能
			AutowireCapableBeanFactory:提供创建Bean，自动注入，初始化，以及应用bean的后处理器
			AbstractAutowireCapableBeanFactory:综合AbstarctBeanFactory并对接口Autowire CapableBeanFactory进行实现。
			ConfigurableListableBeanFactory:BeanFactory配置清单，指定忽略类型及接口。
			DefaultListableBeanFactory:综合上面的功能，主要对bean进行注册等处理。
		2.XmlBeanDefinitionReader
			读取各种配置文件
			XMl配置文件读取的过程：
				通过继承AbstractBeanDefinitionReader中的方法，来使用ResourcLoader将资源
				  文件路径转换为对应的Resource文件
				通过DocumentLoader对Resource文件进行转换，将Resource文件转换为Document文件
				通过实现接口BeanDefinitionDocumntReader的DefalutBeanDefinitionDocumentReader类
				  对Document进行解析，并使用BeanDefinitionParserDelegate对Element进行解析
1.5.容器的基础XmlBeanFactory
	BeanFactory bf=new XmlBeanFactory(new ClassPathResource("ddd.xml"))
	首先调用ClassPathResource的构造函数来构造Resource资源文件的实例对象
	有了Resource后就可以进行XmlBeanFactory的初始化
	1.5.1配置文件的封装
		spring的配置文件读取通过ClassPathResource进行封装。
		Spring对其内部使用到的资源实现了自己的抽象结构：Resource接口进行封装。
		当通过Resource相关类完成了对配置文件进行封装后配置文件的读取功过就全权交给
		  XmlBeanDefinitionReader来处理了。
		 自动装配使忽略给定的依赖接口，典型的应用是通过其他方式解析Application上下文注册依赖
		 类似BeanFactory通过BeanFactoryAware进行注入或者ApplicationContext通过ApplicationContextAwar进行注入
	1.5.2.加载Bean
		封装资源文件，当进入xmlBeanDefinitionReader后首先对参数Resource使用EncodedResource类进行封装
		获取输入流。从Resource中获取对应的InputStream并构造InputSource
		通过构造的InputSource实例和Resource实例继续调用函数doLoadBeanDefinitions。
		doLoadBeanDefinition(InputSource intpuSource, Resource, resoucre,)
			1.获取对XML文件的验证模式
			2.加载xml，并得到相应的document
			3.根据返回的Document注册Bean
		就做了以上三件小事，谢谢大家。
1.6.获取对XML文件的验证模式
	比较蟾宫的验证模式有两种：DTD和XSD
	1.6.1.DTD和XSD区别
		DTD
			文档类型定义，是一种XML的约束语言，是验证机制，属于XML文档的一部分
			包含：元素的定义规则，元素间关系的定义规则，元素可使用的属性，可使用实体或符号规则。
		XSD
			XML Schema
			使用一个指定的XML Schema 来验证某个XML文档，以检查该XML文档是否符合其要求。
			XML Schema 本身是一个xml文档，符合xml语法，可以用通用的xml解析器来解析它。
	1.6.2.验证模式的读取
		如果设定了验证模式则使用指定的验证模式可以在 xmlBeanDefinitionReader中的setValidationMode进行设定
		  ，否则使用自动检测方式，自动检测验证模式的功能是在函数detectValidationMode()，在此函数中，又把
		  工作委托了XmlValidationModeDetector的validationModeDectector()
1.7.获取Document
	经过验证模式
		loadDocument
			首先创建DocumentBuilderFactory
			然后通过DocumentBuilderFactory创建DocumentBuilder
			解析inputSource来返回Do促们对象
	1.7.1.EntityResolver用法
		解析XML:
			SAX首先读取该XML文档上的说明，根据声明去寻找相应的DTD定义，以便对文档进行一个验证
			默认寻找规则，同通过网上DTD的URL
		EntityResolver
			项目本身就可以提供一个如何寻找DTD声明方法，由程序来寻找DTD声明的过程
1.8.解析以及注册BeanDefintions
	当把文件转换为Document后，接下来提取以及注册Bean
	1.8.1.profile属性的使用
		配置两套环境
		更换不同的数据库
	1.8.2.解析并注册BeanDefiniton
		处理了profile后就可以进行xml读取了
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
默认标签的解析
默认标签的解析在parseDefaultElement，函数的功能一目了然，分别对四种标签进行处理
	import,alias,bean,beans
1.bean标签的解析与注册
	protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {
		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);
		if (bdHolder != null) {
			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);
			try {
				// Register the final decorated instance.
				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, 
						getReaderContext().getRegistry());
			}
			catch (BeanDefinitionStoreException ex) {
				getReaderContext().error("Failed to register bean definition with name '" +
						bdHolder.getBeanName() + "'", ele, ex);
			}
			// Send registration event.
			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));
		}
	}
	(1).BeanDefinitionHolder类的parseBeanDefinitionElement进行元素解析，返回BeanDefinitionHolder类型的bdHolder
		经过这个方法后，bdHolder实例已经包含了配置文件的各种属性，例如，name,id,alias,之类的属性
	(2).不为空的情况下，若存在默认标签的子节点下再有自定义属性，还需要再次对自定义标签进行解析。
	(3).解析完成需要对bdHolder进行注册，注册操作委托给BeanDefinReaderUtils的registerBeanDefinition()
	(4).最后发出响应事件，通知相关的监听器，这个bean加载完成
	1.1.解析BeanDefinition
		public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {
			return parseBeanDefinitionElement(ele, null);
		}
		public BeanDefinitionHolder parseBeanDefinitionElement(Element ele,
			BeanDefinition containingBean) {
		String id = ele.getAttribute(ID_ATTRIBUTE);
		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);

		List<String> aliases = new ArrayList<>();
		if (StringUtils.hasLength(nameAttr)) {
			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);
			aliases.addAll(Arrays.asList(nameArr));
		}

		String beanName = id;
		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {
			beanName = aliases.remove(0);
			if (logger.isDebugEnabled()) {
				logger.debug("No XML 'id' specified - using '" + beanName +
						"' as bean name and " + aliases + " as aliases");
			}
		}

		if (containingBean == null) {
			checkNameUniqueness(beanName, aliases, ele);
		}

		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);
		if (beanDefinition != null) {
			if (!StringUtils.hasText(beanName)) {
				try {
					if (containingBean != null) {
						beanName = BeanDefinitionReaderUtils.generateBeanName(
								beanDefinition, this.readerContext.getRegistry(), true);
					}
					else {
						beanName = this.readerContext.generateBeanName(beanDefinition);
						// Register an alias for the plain bean class name, if still possible,
						// if the generator returned the class name plus a suffix.
						// This is expected for Spring 1.2/2.0 backwards compatibility.
						String beanClassName = beanDefinition.getBeanClassName();
						if (beanClassName != null &&
								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&
								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {
							aliases.add(beanClassName);
						}
					}
					if (logger.isDebugEnabled()) {
						logger.debug("Neither XML 'id' nor 'name' specified - " +
								"using generated bean name [" + beanName + "]");
					}
				}
				catch (Exception ex) {
					error(ex.getMessage(), ele);
					return null;
				}
			}
			String[] aliasesArray = StringUtils.toStringArray(aliases);
			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);
		}

		return null;
	}
	主要工作：
		提取元素的id以及name属性
		进一步解析所有属性，并封装到GenericBeanDefinition类的实例中
		如果检测到bean没有指定beanName，那么使用默认规则为此Bean生成BeanName
		将获取到的信息封装到BeanDefinationHolder
	第二个：进一步解析所有属性，并封装到GenericBeanDefinition类的实例中
		public AbstractBeanDefinition parseBeanDefinitionElement(
			Element ele, String beanName, BeanDefinition containingBean) {

			this.parseState.push(new BeanEntry(beanName));

			String className = null;
			//解析class属性
			if (ele.hasAttribute(CLASS_ATTRIBUTE)) {
				className = ele.getAttribute(CLASS_ATTRIBUTE).trim();
			}

			try {
				String parent = null;
				//解析Parent属性
				if (ele.hasAttribute(PARENT_ATTRIBUTE)) {
					parent = ele.getAttribute(PARENT_ATTRIBUTE);
				}
				//创建用于承载属性AbstractBeanDefinition类型的GenericBeanDefinition
				AbstractBeanDefinition bd = createBeanDefinition(className, parent);
				//硬编码解析默认bean的各种属性
				parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);
				//提取description
				bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));
				
				//解析元素
				parseMetaElements(ele, bd);
				//解析lookup-method元素
				parseLookupOverrideSubElements(ele, bd.getMethodOverrides());
				//解析ReplacedMethod元素
				parseReplacedMethodSubElements(ele, bd.getMethodOverrides());

				parseConstructorArgElements(ele, bd);
				//解析property元素
				parsePropertyElements(ele, bd);
				//解析qualifier子元素
				parseQualifierElements(ele, bd);

				bd.setResource(this.readerContext.getResource());
				bd.setSource(extractSource(ele));

				return bd;
			}
			catch (ClassNotFoundException ex) {
				error("Bean class [" + className + "] not found", ele, ex);
			}
			catch (NoClassDefFoundError err) {
				error("Class that bean class [" + className + "] depends on not found", ele, err);
			}
			catch (Throwable ex) {
				error("Unexpected failure during bean definition parsing", ele, ex);
			}
			finally {
				this.parseState.pop();
			}

			return null;
		}
		1.创建用于属性继承的BeanDefinition
			BeanDefinition是个接口，存在三种实现：
				RootBeanDefinition
					是最常用的实现类，它对应一般的<bean>元素标签，
					父<bean>
				ChildBeanDefinition
				GenericBeanDefinition
					是一站式服务类
			都继承了AbstractBeanDefinition，其中BeanDefinition是配置文件<bean>元素标签在容器中内部的表现形式。
			  BeanDefinition与<bean>中的属性是一一对应的。
			spring通过BeanDefinition将配置文件的<bean>配置信息转换为容器的内部表示，
			并将这些BeanDefinition注册到BeanDefinitionRegistry中。
			spring的BeanDefinitionRegistry就像Spring配置信息的内存数据库，以map形势保存，
			  后续操作直接从BeanDefinitionRegistry读取配置信息
			要解析属性首先要创建用于承载属性的实例，也就是创建GenericBeanDefinition
		2.解析各种属性
			当我们创建了bean信息的承载实例中后，便可以进行bean信息的各种解析了，
			首先进入的parseBeanDefinitionAttributes(),对element所有的元素属性进行解析。
			BeanDefinitionParserDelegate.parseBeanDefinitionAttributes(Element ele, String beanName,
			BeanDefinition containingBean, AbstractBeanDefinition bd)
		3.解析子元素meta
			meta：元数据，当需要使用里面的信息时可以通过key获取
			public void parseMetaElements(Element ele, BeanMetadataAttributeAccessor attributeAccessor) {
				NodeList nl = ele.getChildNodes();
				for (int i = 0; i < nl.getLength(); i++) {
				Node node = nl.item(i);
				if (isCandidateElement(node) && nodeNameEquals(node, META_ELEMENT)) {
					Element metaElement = (Element) node;
					String key = metaElement.getAttribute(KEY_ATTRIBUTE);
					String value = metaElement.getAttribute(VALUE_ATTRIBUTE);
					BeanMetadataAttribute attribute = new BeanMetadataAttribute(key, value);
					attribute.setSource(extractSource(metaElement));
					attributeAccessor.addMetadataAttribute(attribute);
					}
				}
			}
		4.解析子元素lookup-method
			lookup-method：获取器注入，是把一个方法声明为返回某种类型的bean但实际要返回的bean是在配置文件里面配置的
		5.解析子元素
			replaced-method：可以在运行时调用新的方法替换现有的方法，还能动态的更新原有方法的逻辑
			parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides）
		6解析子元素
			constructor-arg
			public void parseConstructorArgElement(Element ele, BeanDefinition bd)
			如果配置中指定了index属性
				解析constructor-arg的子元素
				使用ConstructorArgumentValues.ValueHolder来封装解析出来的元素
				将type，name和index属性一并封装在ConstructorArgumentValues.ValueHolder类型中，并添加
				  至当前BeanDefinition的constructorArgumentValues的indexArgumentValues属性中
			如果配置没有指定index属性
				解析constructor-arg的子元素
				使用ConstructorArgumentValues.ValueHolder来封装解析出来的元素
				将type，name和index属性一并封装在ConstructorArgumentValues.ValueHolder类型中，并添加
				  至当前BeanDefinition的constructorArgumentValues的genericArgumentValues属性中
			解析构造函数中子元素的过程
				public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName)
				过程
					略过description或者meta
					提取constructor-arg上的ref和value属性，以便根据规则验证正确性，规则在constructor-arg上不存的情况
						同时既有ref属性和value属性
						存在ref属性或者value属性又有子元素
					ref属性的处理，使用RuntimeBeanReference封装对应的ref名称
						<constructor-arg ref='a'>
					vaule属性的处理，使用TypeStringValue封装
						<constructor-arg value='a'>
					子元素的处理
						<constructor-arg>
							<map>
								<entry key ='key' value = 'value'>
							</map>
						</constructor-arg>
						public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType)
		7.解析子元素property
			public void parsePropertyElements(Element beanEle, BeanDefinition bd)
			<bean id = "test" class ="tesx.cc">
				<property name ="testStr" value="aa">
			</bean>
			与构造函数注入方式不同的是经返回值使用propertyValule进行封装，并记录了BeanDefinition中的propertyValues属性
		8.解析子元素qualifier
			@Autowired是根据类型进行自动装配的。
			  如果当spring上下文中存在不止一个UserDao类型的bean时，就会抛出BeanCreationException异常;
			  如果Spring上下文中不存在UserDao类型的bean，也会抛出BeanCreationException异常。
			  我们可以使用@Qualifier配合@Autowired来解决这些问题。
			配置方式
			<bean id ="myTestBean" class="bean.MytestBean">
				<qualifier type="org.Springframework.beans.factory.annotation.Qualifier" value="ref">
			</bean>
	1.2.AbstractBeanDefinition		 
		xml中所有的配置都可以在GenericBeanDefinition的实例中找到对应的配置。
		GenericBeanDefinition只是子类实现，大部分的通用属性都保存在了AbstractBeanDefinition
	1.3.解析默认标签中的自定义标签
		首先获取属性或者元素的命名空间，以此来判断该元素或者属性是否适用于自定义标签的解析条件，
		  找出自定义类所对应的NamespaceHandler并进行进一步解析
		  
		 decorateBeanDefinitionIfRequired()
			对于程序默认的标签处理其实是直接略过的，因为默认标签到这里已经被处理完了，
			这里只对自定义的标签或者bean的自定义属性感兴趣。
	1.4.注册解析的BeanDefintion
		BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, 
						getReaderContext().getRegistry())
		public static void registerBeanDefinition(
			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)
		解析beanDefinition都会被注册到BeanDefinitionRegistry类型的实例registry中，
			而对beanDefiniton的注册分为两部分，通过beanName，和别名的
			1.通过beanName注册BeanDefinition
				将beanDefinition直接放入map中就好了，使用beanName作为key。
				(1).对AbstractBeanDefinition校验，在解析xml文件的时候我们提过校验，但是此校验非彼校验
					之前的校验是对xml格式的校验，而此时校验是针对于AbstractBeanDefinition的methodOverrides属性
				(2).对beanName已经注册的情况下，如果设置了不允许bean的覆盖，则需要抛出异常
				(3).加入map缓存
				(4).清除解析之前留下的对应beanName的缓存
			2.通过别名注册BeanDefinition
				(1).alias与beanName相同情况处理，若alias与beanName并名称相同则不需要处理并删除掉原有aliais
				(2).alias覆盖处理，若aliasName已经使用已经指向另一BeanName则需要用户的设置处理
				(3).alias循环检测
				(4).注册alias
		
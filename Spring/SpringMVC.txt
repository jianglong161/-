SpringMVC是基于Servlet功能实现的，通过Servlet接口DispatchServlet来封装核心功能的实现
  通过将请求分派给处理程序，同时带有可配置的处理映射，视图解析，本地语言，主题解析以及上载文件支持
  默认的处理程序是非常简单的Controllor接口
  只有一个方法ModelAndView hanldleRequest(request,response)
  如果应用程序需要处理表单，那么可以继承AbstarctFormContorller
  如果需要将多页输入处理到一个表单，那么可以继承AbstractWizardFormController
解决的问题：
	1).将web页面的请求传给服务器
	2).根据不同的请求处理不同的逻辑单元
	3).返回处理结果并跳转至响应的页面
1.SpringMVC快速体验
	1).配置web.xml
		web.xml用来初始化配置信息：
			比如welcom界面
			servlet
			servlet-mapping
			filter
			listener
			启动加载级别等
		SpringMVC实现原理是通过Servlet拦截所有的URL来控制的目的地，所以web.xml的配置是必须的
			contextConfigLocation:
				Spring的核心就是配置文件，这个参数就是web与spring的配置文件相互结合的一个关键配置
				 <context-param>  
					<param-name>contextConfigLocation</param-name>  
					<param-value>classpath:spring-mybatis.xml</param-value>  
				</context-param> 
			DispatcherServlet:
				包含了SpringMVC的请求逻辑，SPring使用此类拦截web请求并进行相应处理
				<servlet>  
					<servlet-name>SpringMVC</servlet-name>  
					<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
					<init-param>  
						<param-name>contextConfigLocation</param-name>  
						<param-value>classpath:spring-mvc.xml</param-value>  
					</init-param>  
					<load-on-startup>1</load-on-startup>  
					<async-supported>true</async-supported>  
				</servlet>  
	2).创建Spring配置文件applicationContext.xml
		 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
			<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
			<property name="prefix" value="/jsp/" />  
			<property name="suffix" value=".jsp" />  
		</bean>  
    3).创建model
		模型对SpringMVC来说并不是必不可少，如果处理程序非常简单，完全可以忽略
		模型创建的主要目的就是承载数据，使数据传输更方便
	4).创建Controller
		控制器用于处理web请求，每个控制器都对应着一个逻辑的处理。
		return new ModelAndView("userlist","users",userList)
		在请求的最后返回了ModelAndView类型的实例，
		ModelAndView类型在SpringMVC中占有很重要的地位
		 控制器执行方法必须返回一个ModelAndView，ModelAndView对象保存了视图以及视图显示的模型数据
			第一个参数：视图组件的逻辑名称，这里的视图逻辑名称就是userlist，视图解析器会使用该名称查找实际的view对象
			第二个参数：传递给视图的，模型对象的名称
			第三个参数：模型对象的值
	5).创建视图文件userlist.jsp
	6).创建servlet配置文件Spring-servlet.xml
SpringMVC是基于Servlet功能实现的，通过Servlet接口DispatchServlet来封装核心功能的实现
  通过将请求分派给处理程序，同时带有可配置的处理映射，视图解析，本地语言，主题解析以及上载文件支持
  默认的处理程序是非常简单的Controllor接口
  只有一个方法ModelAndView hanldleRequest(request,response)
  如果应用程序需要处理表单，那么可以继承AbstarctFormContorller
  如果需要将多页输入处理到一个表单，那么可以继承AbstractWizardFormController
解决的问题：
	1).将web页面的请求传给服务器
	2).根据不同的请求处理不同的逻辑单元
	3).返回处理结果并跳转至响应的页面
1.SpringMVC快速体验
	1).配置web.xml
		web.xml用来初始化配置信息：
			比如welcom界面
			servlet
			servlet-mapping
			filter
			listener
			启动加载级别等
		SpringMVC实现原理是通过Servlet拦截所有的URL来控制的目的地，所以web.xml的配置是必须的
			contextConfigLocation:
				Spring的核心就是配置文件，这个参数就是web与spring的配置文件相互结合的一个关键配置
				 <context-param>  
					<param-name>contextConfigLocation</param-name>  
					<param-value>classpath:spring-mybatis.xml</param-value>  
				</context-param> 
			DispatcherServlet:
				包含了SpringMVC的请求逻辑，SPring使用此类拦截web请求并进行相应处理
				<servlet>  
					<servlet-name>SpringMVC</servlet-name>  
					<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
					<init-param>  
						<param-name>contextConfigLocation</param-name>  
						<param-value>classpath:spring-mvc.xml</param-value>  
					</init-param>  
					<load-on-startup>1</load-on-startup>  
					<async-supported>true</async-supported>  
				</servlet>  
	2).创建Spring配置文件applicationContext.xml
		 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
			<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
			<property name="prefix" value="/jsp/" />  
			<property name="suffix" value=".jsp" />  
		</bean>  
    3).创建model
		模型对SpringMVC来说并不是必不可少，如果处理程序非常简单，完全可以忽略
		模型创建的主要目的就是承载数据，使数据传输更方便
	4).创建Controller
		控制器用于处理web请求，每个控制器都对应着一个逻辑的处理。
		return new ModelAndView("userlist","users",userList)
		在请求的最后返回了ModelAndView类型的实例，
		ModelAndView类型在SpringMVC中占有很重要的地位
		 控制器执行方法必须返回一个ModelAndView，ModelAndView对象保存了视图以及视图显示的模型数据
			第一个参数：视图组件的逻辑名称，这里的视图逻辑名称就是userlist，视图解析器会使用该名称查找实际的view对象
			第二个参数：传递给视图的，模型对象的名称
			第三个参数：模型对象的值
	5).创建视图文件userlist.jsp
	6).创建servlet配置文件Spring-servlet.xml
2.ContextLoaderListenter
	在web.xml中我们首先配置的就是ContextLoaderListener
	更多的与web环境相结合，通常的方法就是以路径context-param的方式并注册使用ContextLoaderListener进行监听读取。
	ContextLoaderListenter的作用就是：
		启动web容器的时候
		自动装配ApplicationContext的配置信息
		因为它实现了ServletContextListener这个接口
	在web.xml配置这个监听器，启动容器的时候，就会默认执行它的实现方法。
	使用ServletContextListener接口，开发者能够在客户端请提供服务之前向ServletContext中添加任意对象
	这个对象在ServletContext启动的时候被初始化，然后在ServletContext整个运行期的都是可见的
	在ServletContextListener中核心逻辑便是初始化WebApplicationContext实例并存放在ServletContext中。
	2.1.ServletContextListener的使用
		1).首先创建ServletContextListener,
			目标在启动的时候添加自定义属性，以便于在全局范围内可以随时调用
			系统启动的时候会调用ServletContextListener的contextInitalized()
		2).注册监听器
			<listener>
				com.
			</listener>	
		3).测试
			String myDate = (String) getServletContext().getAttribute("myDate
	2.2.Spring中的ContextLoaderListener
		ContextLoaderListener类的
		public void contextInitialized(ServletContextEvent event)
		这里涉及了一个常用类WebApplicationContext:
			在web应用中，会用到WebApplicationContext
			WebApplicationContext继承了ApplicationContext
			在Application中又追加了一些Web操作及属性
			非常类似通过编程方式使用Spring
			ClassPathXmlApplicationContext类提供的功能
			public WebApplicationContext initWebApplicationContext(ServletContext servletContext)：
			initWebApplicationContext函数主要是创建	WebApplicationContext实例的一个功能架构，初始化的大概步骤：
				1).WebApplicationContext的存在性验证
					在配置中只允许声明一次ServletContextListener
					在Spirng中如果创建WebApplicationContext实例会记录在ServletCOntext以便全局调用
					而是用的key就是WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
					验证方式就是查看serlvetContext实例中是否存在对应的key的属性
				2).创建WebApplicationContext实例
					如果通过验证，则Spring将创建WebApplicationContext实例的工作交给createWebApplicationContext函数
					在初始化的过程中，程序会读取ContextLoader.properties
					并根据其中配置提取将要实现WebApplicationContext接口的实现类，并根据这个实现类通过反射的方式进行实例的创建
				3).将实例记录在servletContext中
				4).映射当前的类加载器与创建的实例到全局变量currentContextPerThread中
3.DisPatcherServlet
	在Spring中ContextLoaderListener只是辅助功能，用于创建WebApplicationContext类型的实例
	真正的逻辑实现其实在DisPatcherServlet中进行，DisPatcherServlet实现了Servlet接口
	serlvet：
		java编写的程序，
		基于HTTP协议
		在服务端运行的
		是按照servlet规范编写的一个java类
		主要处理客户端请求并将结果发送到客户段类
		生命周期有servlet控制，主要三个阶段：
			1).初始化：
				servlet容器加载Servlet类，把servlet类的.class文件的数据读取到内存中
				servlet容器创建一个ServletConfig对象，ServletConfig对象包含了servlet初始化配置信息
				servlet容器创建了servlet对象
				servlet容器调用servlet对象的init方法进行初始化
			2).运行阶段
				当servlet容器接受到一个请求
				servlet容器会针对这个请求创建servletRequest和servletResponse对象
				service()通过servletRequest对象获取请求信息，并处理请求。
				   在通过servletResponse对象生成这个请求的响应结果
				然后销毁这两个对象
				不管请求是post还是get最终都会到service()
			3).销毁阶段
				web应用被终止的时候
				servlet容器会调用servlet对象的destory()方法，然后在销毁servlet对象
				同时也会销毁与serlvet对象相关联的servletConfig对象
				可以在destrory的实现中，释放资源，关闭数据库连接
		servlet被设成请求驱动，servlet的请求可能包含多个数据项
		当web容器接收到某个servlet请求的时候，servlet把请求封装为一个HttpServletRequest对象，然后把对象传给servlet的对应方法
	3.1.Servlet的使用
		1).建立servlet
		2).添加配置
	3.2.DisPatcherServlet的初始化
		在父类HttpServletBean中找到DisPatcherServlet重写的intit()
		初始化过程主要是通过将当前serlvet类型转换为BeanWrapper类型实例，以便Spring中提供注入的功能进行属性的注入
		这些属性：
			contextAttribute
			contextClass
			nameSpace
			contextConfigLocation等
		都可以在web.xml文件中以初始化参数的方式配置在servlet的声明中。
		DisPatcherServlet继承FrameworkServlet,FrameworkServlet类包含了对应的同名属性
		spring会保证这些参数注入到对应的值中，属性的注入主要包含以下：
			1.封装以及验证初始化参数
				ServletConfigProxyValues除了封装属性以外还有对属性验证功能
				封装属性主要是对初始化参数进行封装，也就是servlet中配置的<init-param>中配置的封装
				用户可以通过requiredProperties参数的初始化来强制验证某些属性的必要性
				这样，在属性封装的过程中，一旦检测到requiredProperties中没有指定的初始值，就会抛出异常
			2.将当前serlvet实例转化成BeanWrapper实例
				PropertyAccessorFactory.forBeanPropertyAccess(this);，是spring提供的工具方法
				主要用于将指定实例转换为Spring中可以处理的BeanWrapper类型的实例
			3.注册相对于Resource的属性编辑器
				目的是在对当前实例DisPatcherServlet属性注入过程中一旦遇到Resource类型的属性，就会使用ResourceEditor去解析。
			4.属性注入
			5.servletBean的初始化
				在ContextLoaderListener加载的时候已经创建了WebApplicationContext实例，
				在这个函数中最重要的实例进行进一步的补充和初始化
	3.3.WebApplicationContext的初始化
		initWebApplicationContext函数的主要功能就是创建或刷新WebApplicationContext实例并对servlet功能所使用的变量进行初始化
		FrameworkServlet类的
		protected WebApplicationContext initWebApplicationContext()
			本函数的初始化主要包含几个部分：
			1.寻找或创建对应的WebApplicationContext实例
				WebApplicationContext的寻找以及创建包括以下几个步骤
					1).通过构造函数注入进行初始化
						当进入initWebApplicationContext函数后通过判断this.WebApplicationContext!=null,后
						便可以确定this.WebApplicationContext是否通过构造函数来初始化，
						在web中的核心逻辑DispathcerServlet只可以被声明一次，在spring中已经得到验证
					2).通过contextAttribute进行初始化
						在web.xml中配置参数contextAttritbut来查找ServletContext中对应属性
						默认为WebApplicationContext.class.getName()+".ROOT"，
						也就是在ContextLoaderListener加载时会创建WebApplicationContext实例
						并将WebApplicationContext.class.getName()+".ROOT"为key放入ServletContext中
					3).重新创建WebApplicationContext实例
						如果通过以上两种方式都没有找到任何突破，那就没办法了。只能在这里重新创建的新的实例。
						protected WebApplicationContext createWepApplicationContext(WebApplicationContext parent)
			2.configureAndRefreshWebApplicationContext
				无论通过构造函数还是单独创建，都免不了调用configureAndRefreshWebApplicationContext方法来对已经创建的
				  WebApplicationContext实例进行配置以及刷新。
				无论调用方式如何变化，只要是使用ApplicationContext所提供的功能最后都免除不了使用公共父类
				  AbstractApplicationContext提供的refresh()进行配置文件加载
			3.刷新
				onRefresh()是FrameworkServlete类中提供的模版方法，在其子类DispathcherServlete中进行了重写
				主要用于是刷新Spring在web功能中必须使用的全局变量
				DispatcherServlet类的
					protected void onRefresh(ApplicationContext context) {
					initStrategies(context);
				}
				1).初始化MultipartResolver
					在Spring中MultipartResolver主要用来处理文件上传。
					默认没有，如果想要使用，在web应用上下文中配置multipart解析器
					  这样每个请求都会被检查包含multipart
					如果请求中包含multipart，那么上下文中定义的MultipartResolver就会解析它。
					这样请求中multipart属性就会像其他属性一样被处理。常用配置：
						<bean id ="multipartResolver" class = "org.SpringFramework.web.multipart.commons.Commons.MultipartResolver">
							<property name ="maximumFileSize">
								<value>100000</value>
							</property>
						</bean>
					那么MultipartResolver就是在initMultipartResolver中被加入到DispatcherServlet中
					this.multipartResolver = context.getBean(MULTIPART_RESOLVER_BEAN_NAME, MultipartResolver.class);
					之前已经完成了Spring中配置文件的解析，所以在这里只要是配置文件注册过都可以通过ApplicationContext提供的getBean()
					  来直接获取bean，进而初始化MulitpartResolver中的mulitpartResolver变量。
				2).初始化LocalResover
					在spring的国际化配置中一共有3种方式
						基于URL参数配置
							比如<a href=""?local=zh_CN>,提供这个功能的就是AcceptHeaderLocaleResolver，
							默认的参数名为locale
						基于Session配置
							通过检查用户会话中的预置的属性来解析区域
							最常用的就是根据本次会话中过程中的语言设定语言种类
						基于Cookie的国际化配置
							通过浏览器的cookie来取得local对象	
				3).初始化ThemeResolver
					通过主题Theme来控制网页风格
					一个主题就是一组静态资源
						主题
							org.SpringFramework.ui.context.ThemeSource是Spring中主题资源的接口
							org.SpringFramework.ui.context.support.ResoucrecBundelThemeSource是ThemeSource默认接口的实现类
								<bean id="themeSouce" class="org.SpringFramework.ui.context.support.ResoucrecBundelThemeSource">
									<property name="basenamePrefix" value="com.test"></property>
								</bean>
							默认状态下是在类路径根目录下查找相应的资源
						主题解析器
							org.SpringFramework.web.serlvet.ThemeResolver是主题解析器的接口，工作由三个子类完成
							FixThemeResolve
								用于选择一个固定的主题
							CookieThemeResolve
								用于实现用户所选的主题
							SessionThemeResolve
								用于主题保存在用户的HttpSession中
					拦截器
						根据用户请求来改变主题
				
				4).初始化HandlerMapprings
					当客户端发出Request时，DispatcherServlet会将Request提交给HandlerMapping
					  然后HandlerMapping根据WebApplication Context的配置来回传给DispacherSerlvet相应的Controller
					DispatcherServlet选用HandlerMapprings的过程中，会根据HandlerMapprings的优先级进行排序
					如果当前的HandlerMappring能够返回可用的Handler，DispatcherServlet则使用当前返回的Handler进行Web请求处理
					  而不再询问其他的HandlerMapprings
					否则DispatcherServlet会按照优先级来询问HandlerMappring，直到获取下一个可用的Handler为止
					默认情况下，SringMVC将当前系统中所有实现了HandlerMappring的接口bean
				5).初始化HandlerAdapters
					适配器模式的使用
					如果开发人员没有在配置文件中定义自己的适配器，会默认加载配置文件中的三个配置起
						Http请求处理适配器
							仅仅支持对HTTP请求的适配
							不需要返回值
							主要应用在基于Http的远程调用自己的实现上
						简单控制器处理适配器
							这个实现将Http请求适配到一个控制器进行处理
							这里控制器的实现是一个简单的控制器的实现
						注解方法适配器
							基于注解的实现，需要结合注解方法映射和注解方法处理器协同工作
							通过解析声明在注解控制器的请求映射信息来解析相应的处理器方法来处理当前的HTTP请求
							在处理的过程中通过反射来探测处理方法的参数，调用处理方法，并且映射到返回值到模型和控制器对象
							最后返回模型和控制器对象给作为主控制器的派遣器Servlet
				6).初始化HandlerExceptionResolvers
					异常处理，使用这种方式只需要实现resolveException(),该方法返回一个ModelAndView对象，
					在方法内部对一茶馆的类型进行判断，然后尝试生成对应的ModelAndView对象，如果返回了null，则Spring
					会继续寻找其他是实现了HandlerExceptionResolver接口的bean
				7).初始化RequestToviceNamTranslator
					当Controller处理器方法没有返回一个View对象或逻辑视图的时候，
					 并且在该方法中没有直接往response的输出流里面写入数据的时候，Spring就会采用约定好的方式提供一个逻辑视图名称。
					Spring提供一个自己的实现那就是org.Springframework.web.servlet.view.DefalutRequestToViewNameTranslator
				8).初始化ViewResolvers
					在SpringMVC中，当Controller将请求处理结果放入到ModelAndView中以后
					DispatcherServlet会根据合适的ModelAndView选择合适的视图进行渲染
					ViewResolve接口定义了resolverViewName(),根据viewName创建合适的view
					 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
						<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
						<property name="prefix" value="/jsp/" />  
						<property name="suffix" value=".jsp" />  
					</bean>  
				9).初始化FlashMapManager
					SpringMVC Flash attributes提供了一个请求存储属性，可供其他请求使用
					在使用重定向的时候非常重要，
					例如Post/Redirect/Get模式，Flash attributes在重定向之前缓存，以便重定向之后还能用，并立即删除。
					SpringMVC有两个主要的抽象来支持Flash attributes，FlashMap用于保持Flash attributes，
					  而FlashMapManager用于存储，检索，管理FlashMap实例
4.DispatcherServlet的逻辑处理
	protected final void processRequest(HttpServletRequest request, HttpServletResponse response)
	函数已经开始对请求的处理，虽然细节移到了doservice()处理前后所做的准备与处理工作：
		1).为了保证当前线程的LocalContext以及RequestAttributes可以在当前请求后还能恢复，提取当前线程的两个属性
		2).根据当前Request创建对应的LocalContext和RequestAttribute，并绑定当前线程。
		3).委托给doservice方法进行进一步处理
		4).请求处理结束后恢复线程到原始状态
		5).请求处理结束后无论成功与否发布事件通知
	doService()
		只是一些准备工作
		Spring将已经初始化的功能辅助工具变量
		  比如localResolver，themeResolver等设置在request属性当中
	doDispatch(request, response);
	逻辑处理的过程
	4.1.MultipartContent类型的request处理
		对于请求的处理，Spring首先考虑的是对于Multipart的处理，
		如果是MultipartContent类型的request,则转换request为MulipartHttpServletRequest类型的request
			protected HttpServletRequest checkMultipart(HttpServletRequest request) 
	4.2.根据request信息寻找对应的Handler
		在Spring中最简单的映射处理器配置如下：
			<bean id ="simpleUrMapping" 
				class ="org.SpringFramework.web.serlvet.hanler.SimpleUrlHanderMapping">
				<property name = "mapping">
					<props>
						<prop key="/usrlist.htm">userController</prop>
					</props>
				</property>
			</bean>
		在Spring加载的过程中，Spring会将类型为SimpleUrHandlerMapping的实例加载到this.handlerMappring中，
		提取当前实例中的userController,但是userController为继承自AbstractController类型的实例，
		 与HandlerExecutionChain并无任何关联。
		在系统启动的时候，Spring会将所有的映射类型的bean注册到this.handlerMapping变量中
		protected HandlerExecutionChain getHandler(HttpServletRequest request)函数的目的就是遍历所有的HandlerMapping，
		  并调用其getHandler()进行封装处理
		1.根据request查找对应的Handler
		AbstractUrlHandlerMapping类的
			protected Object getHandlerInternal(HttpServletRequest request) throws Exception
			在函数中将handler以参数形式传入，并构建HandlerExceptionChain类型实例，加入了两个拦截器。
			链处理机制，可以方便对对象进行扩展和拦截。
		2.加入拦截器到执行链
			getHandlerExecutionChain函数最主要的目的是将配置中的对应拦截器加入执行链中，
			 以保证这些拦截器可以有效地作用于目标对象
	4.3.没找到对应Handler的错误处理
		每个请求都对应着一Handler，因为每个请求都会在后台有相应的逻辑处理，而逻辑实现就是Handler中，
		一旦没有找到Handler情况，通过response向用户返回错误信息
		DispatherServlet类的protected void noHandlerFound(HttpServletRequest request, HttpServletResponse response) 
	4.4.根据当前Handler寻找对应的HandlerAdapter
		在普通情况下Web请求会交给SimpleControllerHandlerAdapter去处理
		springmvc中会把逻辑封装到Controller的子类中，
	4.5.缓存处理
		Spring提供对Last-Modified机制的支持，只要实现了LastModified接口
		只需实现LastModified接口的getLastModified(),来保证当内容发生改变的时候返回最新的修改时间即可。
		Spring判断是否过期，通过判断请求的"if-Modified-Since"是否大于等于当前的getLastModeifed方法的时间戳
	4.6.HandlerInterceptor的处理
		处理拦截是在Spring的web应用程序上下文中配置的。
		处理拦截是准对特殊的处理程序映射进行注册的 ，因此它只拦截这些处理程序映射的请求
		每个处理拦截器必须实现HandlerInterceptor，包含三个需要实现的方法,preHandle(),postHandle(),afterCompletion()
			第一个和第二个分别处理请求之前和之后调用的，第二个还允许返回ModelAndView对象，因此可以在里面操作模型属性
			最后一个方法是在所有请求处理完成以后调用的，
			在preHandler()
				返回ture，允许DispatcherServlet继续处理请求。
				否则，DispatcherServlet会认为这个方法已经处理了请求，直接将响应返回给用户
	4.7.逻辑处理
		 通过适配器中调用Handler并返回视图，对应代码是
		 mv = ha.handler(processRequest, response,mappedHandler.getHandler())
		 逻辑是写在handleRequestInternal函数中，而不是handlerRequest函数，所以需要进一步分
	4.8.异常视图处理
		spring主要工作就是将逻辑引导至HandlerExceptionResolver类的resolverException方法
	4.9.根据视图跳转页面
		protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)类
		1.解析视图名称
			以org.SpringFramework.web.servlet.view.InternalResourceViewResolver分析ViewResolver逻辑处理过程
				其中resolveViewName函数的实现是在其父类AbstractCachingViewResolver中完成的
				public View resolveViewName(String viewName, Locale locale) throws Exceptio
			在父类UrlBasedViewResolver重写了createView函数
			对于InternalResourceViewResolver所提供的解析功能主要考虑到几个方面：
				基于效率的处理，提供了缓存的支持
				提供了对redirect:xx和forward:xx前缀的支持
				添加了前缀以及后缀，并向view中加入了必需的属性处理
		2.页面跳转
			通过viewName解析到对应的view后，就可以进一步的处理跳转逻辑了
			对moderlView的使用，可以将一些属性放入到其中，然后在页面上通过jstl语法或者原始的request获取
			而解析这些属性的工作就是在createMergedOutputModel函数中
			InternalResourceView类的
			protected void renderMergedOutputModel(
				Map<String, Object> model, HttpServletRequest request, HttpServletResponse response)
			
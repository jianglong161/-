NIO入门
1.传统BIO编程
	网络编程的基本模型是CS模式，
	 也就是两个进程之间的相互通信
	其中服务器提供位置信息（绑定Ip和监听端口）
	客户端通过连接操作向服务端监听的地址发起连接请求
	通过三次握手建立连接，
	如果建立连接成功，双方通过网络套接字进行通信
	ServerSocket负责绑定ip地址，启动监听服务器
	Socket负责发起连接请求
	连接成功后，双方通过输入流和输出流进行同步阻塞通信
	1.1.BIO通信模型	
		通常由一个独立的Accept线程监听客户端连接。
		接收到客户端连接请求后，为每个客户端创建一个新的线程进行链路处理
		处理完成后通过输出流返回客户端，线程销毁
	1.3.同步阻塞式IO创建的TimeClient源码分析
	BIO的主要问题在于每当有一个新客户请求接入时，
	服务器就必须创建一个新的线程处理新接入的客户端链路，一个线程只能处理一个客户端链接
	在高性能服务器应用领域中，往往要面向成千万个的并发客户端连接，这种模型显然无法满足高性能，高并发接入的场景
	为了改进一线程一连接模型 ，后来又演出了一种通过线程池或者消息队列实现1个或者多个线程处理N个客户端模型，
	由于底层通信机制依然使用同步阻塞IO,所以被称为伪异步
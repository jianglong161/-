一个示例的客户端
	很多客户端都可以都可以选择一次一个连接的方式来实现
	在介绍选择器和非阻塞Io之前，会先介绍通道channel和缓冲区
	首先调用静态工厂方法
		SocketChannel.open()来创建一个新的java.nio.channels.SocketChannel对象
		这个方法的参数是java.net.SocketAddress对象，指示要连接的主机和端口
			SocketAddress rama = new IntetSocketAddress("",port);
			SocketChannel client = SocketChannel.open(rama)
		通道会以阻塞的方式打开
		利用通道可以直接写入通道本身，不是写入字节数组，而是要写入ByteBuffer对象。
			ByteBuffer buffer = ByteBuffer.allocate(74);
		将这个buffer对象传递给通道的read()方法
		通道会用从Socket读取的数据填充这个缓冲区，它返回成功读取并存储在缓冲区的字节数
			int byteRead = client.read(buffer);
		将outputStream System.out封装到一个通道
			WritableByteChannel output = Channels.newChannel(System.out);
		非阻塞模式：
			client.configureBlocking(false);
		在非阻塞模式下，read()可能读不到数据而返回0，因此循环需要有些差别：
			while(true){
				//把每次循环都要运行的代码都放到这里，
				//无论有没有数据
				int n = client.read(buffer);
				if(n > 0){
					buffer.flip();
					out.write(buffer);
					buffer.clear();
				}
			}
一个示例的服务器
	首先调用ServerSocketChannel.open()创建一个新的ServerSocketChannel对象
		ServerSocketChannel serverChanel = ServerSocketChannel.open()
	开通时这个通道并没有具体监听任何端口，
	要把它绑定一个端口，可以用socket()方法获取其ServerSocket等端对象，然后用bind()方法绑定一个端口
		SeverSocket ss = serverChanel.socket();
		ss.bind(new IntetSocketAddress(19));
	在java7以后，可以直接绑定
		serverChanel.bind(new IntetSocketAddress(19));
	服务器socket通道现在在端口19进行监听，要接受连接，调用accepte()
		SocketChannel clientChannel = serverChanel.accpet();
	在服务器，希望客户段处于非阻塞，运行服务端处理多个并发连接：
		clientChannel.configuareBlocking(false);
	只需在调用accept()之前调用configureBlock(false);
	如果没有入栈连接，非阻塞的accept()几乎会立即返回null，要确保对此进行检查，
	  否则当视图使用这个socket(而它实际为null)时，会得到一个讨厌的NullPointException异常
	在传统方法中，需要为每个连接都分配一个线程，线程数目随着客户端连接迅速攀升，相反在新的IO中，可以创建一个Selector
	  允许程序迭代处理准备好的连接，要构造一个新的Selector，只需要调用Selector.open()静态工厂发方法：
		Selector slelctor =Selector.open()
	接下来使用每个通道的register()监视这个通道的选择器进行注册。
	在注册时，要使用SelectionKey类提供的命名常量指定所关注的操作
	对于服务器的Socket，唯一关心的操作就是OP_ACCEPT，也就是服务器Socket通道是否准备好了一个新的连接
		serverChannel.register(selectot,Selectionkey.OP_ACCETP);
	对于客户端通道，希望直到是否已经准备好数据可以写入通道，为此要使用OP_WRITE键
		SelectionKey key = clientChannel.register(selector,SelectionKey.OP_WRITE);
	两个register()都返回一个SelectionKey对象
	为了检查是否有可操作的数据，可以调用选择器的select()方法，对于长时间运行的服务器，这一般要放在一份无限循环中：
		while(true){
			selector.select();
			
		}
	假定选择器确实找到了一个就绪的通道，其SelectedKeys()就会返回一个java.util.Set,其中对应各个就绪通道分别包含一个SelecttionKey对象
		Set<SelectionKey> readyKeys = select.selectKeys();
		Iterator iterator =　readyKeys.iterator();
		while(iterator.hasNext())
			SelectionKey key = iterator.next();
			//从集合中删除这个键，从而不会处理两次
			iterator.remove();
			//处理通道
	通过从集合中删除键，这就告诉选择器这个键已经用过了
	如果就绪的通道是服务器通道，那么程序就会接受一个新Socket通道，将其添加到选择器，
	如果就绪的通道是Socket通道，程序就会向通道中写入缓冲区中尽可能多的数据。
	如果没有通道就绪，选择器就会等待。一个线程同时处理多个连接。
	服务器通道只准备接受，客户端通道只准备写入
		try{
			if(key.isAcceptable){
				ServerSocketChannels server = key.channel();
				SocketChannel connection = server.accept();
				connection.configuareBlocking(false);
				connection.register(selector,Selection,OP_WRITE);
			}else if(key.isWritable){
				SocktChannel client = key.channel();
				//向客户端写入数据
			}
		}
缓冲区：
	直接从缓冲区读写数据
	流和通道之间的区别是流是基于字节的，通道是基于块的。
	每个缓冲区都记录了信息的4个关键部分，无论缓冲区是何种类型，都有相同的方法来获取和设置这些值：
		位置
			缓冲区将读取或者写入的下一个位置，这个位置从0开始，最大值等于缓冲区的大小，可以用下面两个方法获取和设置：
				public final int position()
				public final Buffer	position(int newPosition)
		容量：
			缓冲区可以保持元素的最大数目。容量值在创建缓冲区时设置，此后不能改变
				public final int capacity()
		限度：
			缓冲区中客户端指定的索引，通过调用mark()可以将标记位置为当前位置。
			调用reset()可以将当前位置设置为所标记的位置：
				public final Buffer mark()
				public final Buffer reset()
			如果位置低于现有标记，则放弃这个标记
	与读取InputStream不同，读取缓冲区实际上不会以任何方式改变缓冲区中的数据。
	只可能向前或者向后设置，从而可以从缓冲区中某个特定位置开始读取
	clear():
		将位置设为0，并将限度设置为容量，从而将缓冲区清空，这样一来，就可以重新填充缓冲区了。
		并没有删除缓冲区中的老数据，还可以使用绝对的get()或者在改变限度或者位置进行读取
	rewind():
		将位置变为0，但不改变限度
		允许重新读取缓冲区
	flip():
		将限度设置为当前位置，位置设置为0
创建缓冲区	
	缓冲区的层次是基于继承的，而不是基于多态
	空的缓冲区一般都是由分配allocate方法创建
	预填充数据的缓冲区由包装wrap方法创建。
	分配的方法常用于输入，而包装方法一般用于输出
	分配：
		基本的allocate()只返回一个有指定容量的新缓冲区，这是一个空缓冲区。
			ByteBuffer buffer1 = ByteBuffer.allocate(100);
			IntBuffer buffer2 = IntBuffer.allocate(100);
		游标位于缓冲区开始的位置，
		用allocate()创建的缓冲区基于java数组实现，可以通过array()和arrayOffset()方法进行访问
			byte[] data1 = buffer1.array();
			int[] data2 = buffer2.array()
	直接分配：
		不为创建缓冲区创建后背数组
			ByteBuffer buffer1 = ByteBuffer.allocateDirect();
		在直接缓冲区调用array()和arrayOffset()会抛出一个异常 
		直接缓冲区在一些虚拟机上更快，尤其是缓冲区很大
		创建的代价很高，所以只能在缓冲区可能值持续较短的时间内创建直接缓冲区
	包装：
		如果有了要输出的数据数组，一般要用缓冲区进行包装，而不是分配一个新的缓冲区，然后一次一次复制到这个缓冲区。
			byte[] data1 = "ssss".getBytes("UTF-8");
			ByteBuffer buffer1 = ByteBuffer.wrap(data1);
	填充和排空
		缓冲区是为了顺序访问而设计的，
批量方法
	ByteBuffer有put()和get()方法，可以用现有的字节数组或者子数组填充和排空一个3ByteBuffer
视图缓冲区
	从SocketChannel读取的ByteBuffer只包含一个特定的基本数据类型的元素，那么就有必要创建一个视图缓冲区
	这是一个适当类型的新的Buffer对象，它从当前位置开始由底层ByteBuffer提取数据。修改视图缓冲区反映到底层缓冲区。
		public abstract ShortBuffer asShortBuffer()
压缩缓冲区
	大多数可写缓冲区都支持compact()
复制缓冲区
分片缓冲区
	是复制的一个变形，分片也会创建一个新的缓冲区，与原缓冲区共享数据
	分片只是原缓冲区一个子序列
	只包含当前位置到有限度的
通道：
	3个重要的通道类
		SocketChannel
			可以读写TCP Socket
			数据必须编码到ByteBuffer对象中来完成读写
			每个SocketChannel都与一个对等端peer Socket对象相关联
			连接：
				SocketChannel类没有任何公共构造函数。实际上，要使用两个open()来创建新的SocketChannel对象：
					public static SocketChannel open(SocketAddress remote) throws IOException
					public static SocketChannel opne() throws IOException
				第一个方法会建立连接，这个方法会阻塞
					SocketAddress address = new SocketAddress("sss");
					SocketChannel channel = SocketChannel.open(address);
				无参数版本不立即连接，会创建一个初始未连接的socket，以后必须用connect()方法进行连接。
					SocketChannel channel = SocketChannel.open();
					SocketAddress address = new SocketAddress("");
					channel.connect(address)
			读取：
				为了读取SocketChannel，首先创建一个ByteBuffer，通道可以在其中储存数据，然后将这个ByteBuffer传给read()方法
					public abstarct int read(ByteBuffer dst) throws IOEception
				通道会用尽可能的数据填充缓冲区，然后返回放入字节数
				如果遇到流末尾，通道会用所有剩余的字节填充缓冲区，而且在下一次调用read()时返回-1；
					while(buffer.hasRemaining()&&channel.read(buffer) != -1)
				有时如果能从一个源填充多个缓冲区，称为散布
			写入：
				public abstarct int write(ByteBuffer src) throws IOException
				while(buffer.hasRemaining() && channel.write(buffer) != -1);
				将多个缓冲区中写入一个Socket通常很有用，成为聚集
			关闭
				public void close() throws IOException
		ServerSocketChannel
			目的只有一个，接受入站连接。
			无法读取，写入或连接ServerSocketChannel,
			支持的唯一操作就是接受一个新的入站连接
			本身声明了4个方法：
				其中accept()最重要
			创建服务器socket通道：
				静态工厂方法ServletSocketChannel.open()创建一个ServerSocketChannel对象。
				实际上并不打开一个新的服务器Socket，而只是创建这个对象
				使用之前，需要调用socket()来获得相应的对等端peer，ServerSocket
				下面的代码在端口80上打开一个ServletSocketChannel
					try{
						ServerSocketChannel channel = ServerSocketChannel.open();
						SocketAddress address = new SocketAddress();
						channel.bind(address)；
					}
			接受连接：
				一旦打卡并绑定了ServerSocketChannel对象，accept()就可以监听入站连接。
				public abstact SocketChannel accept() throws IOException
		DatagramChannel
异步通道
	java7引进AsynchronousSocketChannel和AsynchronousServerSocketChannel类
	与SocketChannel和ServerSocketChannel不同的是，读写异步通道会立即返回。
	  甚至在I/O完成之前就会返回，所读/写的数据会由一个Future或CompletionHandler进一步处理。
	connect()和accept()方法也会异步执行并返回Future
		SockeAddress address = new SocketAddress("",port);
		AsynchronousSocketChannel client = AsynchronousSocketChannel.open();
		Futeure <void> connceted = client.conncet (address);
		ByteBuffer buffer = ByteBuffer.allocate(74);
		//等待连接完成
		conncet.get();
		//从连接中读取
		Future<Integer> future = client.read(buffer);
		//做其他工作
		//等待读取完成
		future.get();
		//回绕并排空缓冲区
		buffer.filp()
		WritableByteChannel out = Channels.newChannel(System.out);
		out.write(buffer);
Socket选项
	都实现了NetworkChannel接口
	这个接口的主要作用是支持各种TCP选项
就绪选择
	能够读写时不阻塞的Socket
	为了完成就绪选择，要将不同的的通道注册到一个Selector对象
	每个通道分配一个SelectionKey.然后程序可以询问这个Selector对象，
	  哪些通道已经准备就绪可以无阻塞的完成你希望的工作，可以请求Selecrtor对象返回相应的键集合。
Selector类
	要用静态工厂方法Selector.open()来创建新的选择器。
	下一步就是选择器增加通道
		register()在SelectorChannel类
	有三个方法可以选择就绪的通道，区别在于寻找就绪通道等待的时间。
		selectNoe()
			会完成非阻塞的选择，如果之前没有准备好要处理的连接，会立即返回。
		int select()
			返回前会等待，直到至少有一个注册的通道准备好可以进行处理
		int select(long timeout)
			在返回0前只等待不超过tiemou毫秒。
	当直到通道准备好的时候，可以使用selectedKeys()获取通道：
		public abstract Set<SelectionKey> selectedKeys()
SelectionKey类
	对象相当于通道的指针，还可以保存一个对象的附件，一般会存储这个通道上连接的状态
	一旦了解了与键关联的通道准备好完成何种操作，就可以使用channel()方法来获取这个通道了
		public abstract SelectableChannel channel()
	如果在保存状态信息的SelectionKey存储了一个对象，就可以用attachement()获取该对象。
		public final Object attachment()
	最后如果使用连接，就要撤销SelectionKey对象的注册，
	这样选择器就会浪费资源再去查询它是否准备就绪
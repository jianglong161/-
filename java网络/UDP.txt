UDP协议
java中UDP的实现分为两个类：
	DatagramePacket
		将数据字节填充到UDP包中，这称为数据报，由你来解包接受的数据报
	DatagramSocket
		可以收发UDP数据报
UDP客户端
	首先在端口0打开一个Socket
		DatagramSocket socket = new DatagramSocket(0);
	设置一个超时时间
		socket.setSoTimeout(10000);
	接下来建立数据包，要建立两个数据包，一个是要发送的数据包，另一个是要接收的数据包
		InetAddress host = InetAddress.getByName("");
		DatagramePacket request = new DatagramPacket(new byte[1],1,host,13);
	接受服务器的响应数据包只包含一个空的byte数组，这个数组要足够大，可以包含整个响应，如果太小，就会截断响应
		byte[] date = new byte[1024];
		DatagramPacket response = new DatagramPacket(date,date.length);
	现在已经准备就绪，首先在这个Socket上发送数据包，然后接收响应
		socket.send(request);
		socket.receive(response);
	最后从响应中提取字节，将他们转换为可以显示给最终用户的字符窜
		String dayTime = new Stirng(response.getDate(),0,response.getLength(),"US-ASCII");
UDP服务端
	UDP服务器几乎遵循与UDP客户端同样的模式，只不过通常在发送之前先会接受，而且不会需要选择绑定的匿名接口，
	与TCP不同，并没有单独的DatagramServerSocket类
		DatagramSocket socket = new DatagramSocket(13);
		DatagramPacket request = new DatagramPacket(new byte[1024],0,1024);
		socket.receive(request);
		String daytime = new Date().toString();
		byte[] data = dayTime.getBytes("US-ASCII");
		InetAddress host = request.getAddress();
		int port = request.getPort();
		DatagramPacket response = new DatagramPacket(data, data.length,host,port);
	最后通过接受数据包的同一个Socket发回响应
		socket.send(response);
DatagramPacket类
	UDP数据报是基于IP数据报建立的，只向其底层Ip数据报添加了很少的内容
	UDP首部只向IP首部添加了8个字节。
构造函数 
	所有6个构造函数都接受两个参数，
		一个是保存数据报的byte数组，
		另一个是该数组中用于数据报数据的字节数。
	get的一些方法
	set的一些方法
DatagramSocket类
	要收发DatagramSocket类，必须打卡打开一个数据报Socket
	数据报Socket通过DatagramSocket类创建和访问
发送和接受数据报
	DatagramSocket类的首要任务是发送和就收UDP数据报
	一个Socket可以既发送又接受数据报
	一旦创建了DatagramPacket并构造了DataGramSocket,可以将包传递给Socket的send()来发送这个包
		假如theSocket是一个DatagramSocket对象，theOutput是一个DatagramPacket对象，可以如下使用theSocket发送theOutput
			theSocket.send(theOutput)
管理连接
	public void connect(InetAddress host,int port)
		connect()并不是真正意义上建立TCP意义上的连接
		它确实指定了DatagramSocket只对指定远程主机和指定远程端口收发数据包
		调用conncet()要进行安全性检查
Socket选项：
DatagramChannel
	用于非阻塞的UDP应用程序
	在UDP中，一个数据报Socket可以处理多个客户端的输入和输出请求
使用DatagramChannel
	打卡一个Socket
		DatagramChannel channel = DatagramChannel.open();
	在绑定端口，需要使用Socket()访问该通道的对等DatagramSocket对象
		DatagramSocket socket = channel.socket();
		socket.bind(new InetSocketAddress(3141));
	接受
		receive()从通道读取一个数据报，放在一个ByteBuffer()
	发送
		send()将一个数据报包从ByteBuffer()写入通道，要写到第二个参数地址：
		public int send(ByteBuffer src, SocketAddress target) throw IOException
		如果希望向多个客户端发送相同的数据，可以重用ByteBuffer,不过不要忘记首先要将其回倒(rewind)
	连接
		一旦打开一个数据报通道，可以使用connect()方法将它链接到一个特定的远程地址
			SocketAddress remote = new InetSocketAddress("",port);
			channel.connect(remote);
	读取
		除了用于特殊用途的receive()方法，DatagramChannel()还有3个一般的read()方法
	写入
		DatagramChannel()有3个write()
		所有可写，散布(scattering)的通道都有这3个方法，它们可以用来代替send()
	关闭
									
事务
1.认识事务
	1.2.分类
		扁平事务
			所有操作都处于同一个层次
			其由BeginWork开始，由Commmit WORK或Rollback WORK结束
			期间的操作都是原子的
			主要限制不能提交或者回滚世界的某一部分
		带有保存点的扁平事务
			允许事务在执行过程中回滚到同一事务中较早的一个状态
			保存点用来通知系统应该记住当前的状态，以便之后发生错误的时候，事务能回到保存的地点
			保存点使用save work函数来建立
		链事务
			保存点事务的一种变种，带有保存点的扁平是事务
			在提交一个事务，释放不需要的数据对象，将必要的处理上下文隐式的传给下一个要开始的事务
			提交事务的操作和下一个事务的操作合并为一个原子操作。
			带有保存点的扁平事务能回滚到任意正确的保存点
			链事务的回滚仅限当前事务，最近的一个保存点
			在执行commit后释放了所有的锁，带有保存点的事务不影响所有的锁
		嵌套事务
			是一个层次结构的框架，由一个顶层事务控制这更层事务
			嵌套事务是由若干事务组成的一棵树，子树既可以是嵌套事务，也可以是扁平事务
			处在叶节点的事务是扁平事务，但是每个事务从根到叶节点的距离可以是不同
			位于根节点的事务称为顶层事务，其他事务称为子事务
			子事务既可以提交也可以回滚
			树的任意事务的回滚会引起它的所有子事务一同回滚，不具有d特性
		分布式事务
			在一个分布式环境下运行的扁平事务。
2.事务的实现
	原子性，一致性，持久性，通过数据库的redo log和undo log来完成
	redo log称为重做日志，用来保证事务的原子性和持久性
	undo log保证事务的一致性
	2.1.redo
		重做日志用来实现事务的持久性，两部分组成
			内存中的重做日志缓冲
			重做日志文件
		在每次日志都写入重做日志文件，在每次都将日志缓冲写入重做日志文件后，都需要调用一次fsync
		重做日志文件并没有打开并使用O_DIRECT选项，重做日志缓冲先写入文件系统缓存
		磁盘的性能决定了数据库的性能
		通过innoDb_flush_log_at_trx_commit为0或者2来提高事务的提交功能，
		 这种设置方式丧失了ACID
		2.log block
		重做日志都是以512字节进行存储的，重做日志缓存，重做日志文件都是以块的方式block保存
		  成为重做日至块。每块大小为512字节
		重做日至块除了日志本身，还有日志块头以及日志块尾
		重做日志头一共占用12字节，重做日志尾占用8字节
		每个重做日志块可以存储的字节大小为492字节
		3.log group
		重做日志组
		由多个重做日志文件组成，每个log group中的日志文件大小是相同的
		4.重做日志格式
		通用的头部格式由一下3部分组成
			redo_log_type：重做日志类型
			space：表空间ID
			page_no:页的偏移量
		5.LSN
		日志序列号，占用 8字节，并且单调递增，LSN表示的含义有：
			重做日志写入的检查
			checkpoint的位置
			页的版本
	2.2.undo
		重做日志为了记录事务的行为，可以更好的通过其对页进行重做。但是事务有时还需要进行回滚操作，需要undo
		undo存放到数据库内部的一个特殊段segment，成为undo段
		位于共享表空间内
		undo是逻辑日志，因此只是将数据库逻辑的恢复的原来的样子
		undo会产生redo
		2.undo存储管理
		采用段的方式
		引擎有log segement，每个undo log  segement段中进行undo也的申请
		共享表空间偏移量为5页记录了所有rollback segement header所在的页
		3.undo log格式
		分为
			insert undo log
			update undo log
	2.3.purge
		用于完成delete和update操作
	2.4.group commit
		事务提交时会进行两个阶段操作：
			修改内存中事务对应的信息，并且将日志写入重做日志缓冲
			调用fsync将确保日志都从重做日志缓冲写入磁盘
3.事务控制语句
	START TRANSACTION|BEGIN:显示开启一个事务
	SAVEPOINT identifer:在事务创建中创建一个 保存点
	RELEASE SAVEPOINT identifer:删除一个事务保存点
	ROllBACK TO:回滚到一个事务的保存点
	SET TRANSACTION：这个语句用来设置事务的隔离级别
4.隐式提交SQL语句
	DDL语句
	用来隐式的修改Mysql架构的操作
		CREATE USER,DROP USER,GRANT RENAME USER,REVOKE,SET PASSWORD
	管理语句
		ANALYZE TABLE ,CACHE INDEX, CHECK TABLE,LOAD INDEX, INTO CACHE,
		OPTIME TABLE ,REPAIR TABLE
5.对事务操作的统计
	TPS
6.事务的隔离级别
	READ UNCOMMIT
		浏览访问
	READ COMMIT
		游标稳定
	REPETABLE READ
		没有幻读保护
	SERIALIZABLE
		3度隔离
	隔离程度越低，事务的请求的锁越少或保持锁的时间就越短
7.分布式事务
	InnoDB存储引擎提供了对XA事务的支持，通过XA事务来支持分布式事务
	分布式事务允许多个事务独立资源参与一个全局事务当中
	全局事务要求所有参与的事务要不都提交，要不都回滚
	隔离度离别必须设置为SERIALIZABLE
	XA事务：
		由一个或者多个资源管理器，
			提供访问事务资源的方法。通常一个数据库就是一个资源管理器	
		一个事务管理器
			协调参与全局事务当中的各个事务。需要和参与全局是事务的所有资源管理器进行通信
		以及一个应用程序。
			定义事务的边界，指定全局事务的操作。
	分布式事务使用两段提交
		第一阶段
			所有参与全局事务的节点开始准备，告诉事务管理器他们准备好了
		第二阶段
			事务管理器告诉资源管理器执行collbacke或者commit
	2.内部XA事务
8.不好的事务习惯
	1.再循环中提交
	2.使用自动提交	
	3.使用自动回滚
9.长事务
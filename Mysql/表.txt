表
1.索引组织表：根据主键的顺序组织存放的
	如果没有在创建表的时候创建主键，那么InnoDB存储引擎会按下方来创建主键
		首先判断是否有非空的唯一索引 Unique NOT NULL ,如果有，为主键
		如果没有这样的条件，那么InNoDB自动创建一个6字节大小的指针
		主键的选择是根据定义索引的顺序，而不是建表时列的顺序。
2.InnoDB逻辑存储结构
	所有的数据都被存放到一个空间里面，成为表空间
	表空间：
		段：segment
		区：extent
		页：page,也成为block
	表空间：
		InnoDB引擎有一个共享表空间ibdata1，即所有数据都存放在这个表空间之中。
		启用了参数innodb_file_per_table，则每张	表内的数据都单独放到一个表空间中。
			放入的只是数据，索引和插入缓冲Bitmap页
			回滚undo信息，插入缓冲索引页，系统事物，二次写缓冲等还是存放到原来的共享表空间内。
	段：
		数据段，索引段，回滚段，
		数据极为B+数的叶子节点
		索引即为B+数的非索引节点
		对段的管理都是引擎自身完成
	区：
		是由连续页组成的空间，每个为1MB，引擎页的大小为16kb，即一个区中共有64个连续的页
	页：每个页的大小为16KB,常见页的类型为：
		数据页
		undo页
		系统页
		事物数据页
		插入缓冲位图页
		插入缓冲空闲页
		未压缩的二进制大对象页
		压缩的二进制大对象页
	行：数据是按行来存放的
3.InnoDB行记录格式
	SHOW TABLE STATUS LIKE 't_user' 查看格式
	数据库的实例的作用就是读取页中存放的行记录，如果知道自己页中行记录的规则，也可以自己编写
	3.1.Compact行记录格式
		一个页中存放的行越多，性能就越高。
		的首部是一个非Null变长字段长度列表，并且按照列的顺序逆序放置 长度为：
			若列的长度小于255字节，用1字节表示
			若大于，用2字节表示
		无论是varchar还是charNull值都不占存储空间
	3.2.Redundant行行记录格式
	3.3.行溢出数据
		varchar最大字节为65532
4.InnoBD数据页结构
	文件头 38
	页头 page Header 56
		记录数据页的状态信息
	Infimun和Supermun Records 
		记录数据的边界
	User Records
		实际存储的内容
	Free Spance
	Page Directory
		记录的相对位置
	File Trailer  8
		为了检查页是否已经完整写入硬盘
	InnoDB数据页结构示例分析
5.Name File Formats机制
6.约束
	6.1.数据的完整性
		关系型数据本身能保证存储数据结构的完整性，不需要应用程序控制。
		提供了约束机制：
			实体完整性保证表中有一个主键
			通过定义primary key或者unique key 来约束保证实体的完整性
			域完整性通过以下途径来保证：
				选择合适的数据结构	确保数据值满足的特定条件
				外键约束
				编写触发器
				DEFAULT约束作为强制域完整性的一个方面。
	6.2.约束的创建和查找
		约束的创建采用以下两种方式：
			表建立时就进行约束定义
			利alter Table命令创建约束
			对unique key 通过命令 create unique index 默认约束名和列名一样
	6.3.约束和索引的区别
		用户建立一个索引就创建了一个唯一的约束
		约束更像一个逻辑概念，用来保证数据的完整性
		索引是一个数据结构，既有逻辑上 的概念，在数据库中还代表物理存储的方式
	6.4.对错误数据的约束
		修改sql_mode
	6.5.ENUM 和 SET 约束
		EUUM 比如 男的女的
	6.6.触发器约束
		触发器的作用是在执行Insert，delte和update命令之前或者之后，自动调用sql命令或者存储过程
		创建触发器的命令是
			create trigger
			create 
				[DEFINER={USER|CURRENT_USER}]
				TRIGGER trigger_name before|alter insert|update|delete
				on table_name for each row trigger_stmt
			for each row:触发方式，即按每行触发。
	6.7.外键约束
		外键用来保证参照的完整性
7.视图
8.分区表
	分区的额过程就是把一个表或者索引分解为多个更小，更可管理的部分，
	从逻辑上来说一个表只有一个索引，但是物理上来说这个表索引可能由数十个物理分区组成。
	MYsql支持的分区类型为水平分区，不支持垂直分区
	分区是局部分区索引
	一个分区中既存放了数据又存放了索引
	全局分区指的是数据存放到各个分区中，但是所有数据的索引放在一个对象中。
	分区可能会给某些sql语句带来性能提高，但是分区主要用于数据库可用性管理
	支持一下集中分区
		RANGE分区：
			行数据基于属于一个给定连续区间的列值被放入分区。
		LIST分区：
			和RANGE分区相似，只不过LIST分区存放的是离散的值
		HASH分区：
			根据用户自定义的表达式的返回值进行分区。返回值不能为负数
		KEY分区：
			数据库提供的哈希函数来进行分区
		不管创建何种分区，如果表中主键或者唯一索引时，分区列必须是唯8.一索引的一个组成部分呢
	子分区：在分区的基础上在进行的分区
		每个子分区的数量必须相同
		要在一个分区表上使用SUBPARTITION来明确定义任何分区，就必须定义所有子分区
		
	
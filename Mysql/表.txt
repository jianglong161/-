表
1.索引组织表：根据主键的顺序组织存放的
	如果没有在创建表的时候创建主键，那么InnoDB存储引擎会按下方来创建主键
		首先判断是否有非空的唯一索引 Unique NOT NULL ,如果有，为主键
		如果没有这样的条件，那么InNoDB自动创建一个6字节大小的指针
		主键的选择是根据定义索引的顺序，而不是建表时列的顺序。
2.InnoDB逻辑存储结构
	所有的数据都被存放到一个空间里面，成为表空间
	表空间：
		段：segment
		区：extent
		页：page,也成为block
	表空间：
		InnoDB引擎有一个共享表空间ibdata1，即所有数据都存放在这个表空间之中。
		启用了参数innodb_file_per_table，则每张	表内的数据都单独放到一个表空间中。
			放入的只是数据，索引和插入缓冲Bitmap页
			回滚undo信息，插入缓冲索引页，系统事物，二次写缓冲等还是存放到原来的共享表空间内。
	段：
		数据段，索引段，回滚段，
		数据极为B+数的叶子节点
		索引即为B+数的非索引节点
		对段的管理都是引擎自身完成
	区：
		是由连续页组成的空间，每个为1MB，引擎页的大小为16kb，即一个区中共有64个连续的页
	页：每个页的大小为16KB,常见页的类型为：
		数据页
		undo页
		系统页
		事物数据页
		插入缓冲位图页
		插入缓冲空闲页
		未压缩的二进制大对象页
		压缩的二进制大对象页
	行：数据是按行来存放的
3.InnoDB行记录格式
	SHOW TABLE STATUS LIKE 't_user' 查看格式
	数据库的实例的作用就是读取页中存放的行记录，如果知道自己页中行记录的规则，也可以自己编写
	3.1.Compact行记录格式
		一个页中存放的行越多，性能就越高。
		的首部是一个非Null变长字段长度列表，并且按照列的顺序逆序放置 长度为：
			若列的长度小于255字节，用1字节表示
			若大于，用2字节表示
		无论是varchar还是charNull值都不占存储空间
	3.2.Redundant行行记录格式
	3.3.行溢出数据
		varchar最大字节为65532
4.InnoBD数据页结构
	文件头 38
	页头 page Header 56
		记录数据页的状态信息
	Infimun和Supermun Records 
		记录数据的边界
	User Records
		实际存储的内容
	Free Spance
	Page Directory
		记录的相对位置
	File Trailer  8
		为了检查页是否已经完整写入硬盘
	InnoDB数据页结构示例分析